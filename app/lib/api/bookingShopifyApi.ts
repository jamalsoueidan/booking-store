/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * Booking Shopify Api
 * OpenAPI spec version: 1.0.0
 */
import type {
  CustomerBlockedCreateBody,
  CustomerBlockedCreateResponse,
  CustomerBlockedDestroyResponse,
  CustomerBlockedListParams,
  CustomerBlockedListResponse,
  CustomerBlockedRangeParams,
  CustomerBlockedRangeResponse,
  CustomerBookingGetByGroupIdResponse,
  CustomerBookingRangeParams,
  CustomerBookingRangeResponse,
  CustomerCreateBody,
  CustomerCreateResponse,
  CustomerGetResponse,
  CustomerIsBusinessResponse,
  CustomerLocationCreateBody,
  CustomerLocationCreateResponse,
  CustomerLocationGetProductsResponse,
  CustomerLocationGetResponse,
  CustomerLocationListResponse,
  CustomerLocationRemoveResponse,
  CustomerLocationSetDefaultResponse,
  CustomerLocationUpdateBody,
  CustomerLocationUpdateResponse,
  CustomerOrderGetResponse,
  CustomerPayoutAccountCreateBody,
  CustomerPayoutAccountCreateResponse,
  CustomerPayoutAccountDestroyResponse,
  CustomerPayoutAccountGetResponse,
  CustomerPayoutBalanceResponse,
  CustomerPayoutCreateResponse,
  CustomerPayoutGetResponse,
  CustomerPayoutLogPaginateParams,
  CustomerPayoutLogResponse,
  CustomerPayoutPaginateParams,
  CustomerPayoutPaginateResponse,
  CustomerProductAddBody,
  CustomerProductAddResponse,
  CustomerProductDestroyResponse,
  CustomerProductGetResponse,
  CustomerProductListIdsResponse,
  CustomerProductListResponse,
  CustomerProductOptionsAddBody,
  CustomerProductOptionsAddResponse,
  CustomerProductOptionsDestroyResponse,
  CustomerProductOptionsListResponse,
  CustomerProductOptionsUpdateBody,
  CustomerProductOptionsUpdateResponse,
  CustomerProductUpdateBody,
  CustomerProductUpdateResponse,
  CustomerScheduleCreateBody,
  CustomerScheduleCreateResponse,
  CustomerScheduleDestroyResponse,
  CustomerScheduleGetResponse,
  CustomerScheduleListResponse,
  CustomerScheduleSlotsUpdateBody,
  CustomerScheduleSlotsUpdateResponse,
  CustomerScheduleUpdateBody,
  CustomerScheduleUpdateResponse,
  CustomerStatusResponse,
  CustomerUpdateBody,
  CustomerUpdateResponse,
  CustomerUploadResourceURLResponse,
  LocationGetCoordinatesParams,
  LocationGetCoordinatesResponse,
  LocationGetTravelTimeParams,
  LocationGetTravelTimeResponse,
  MetaProfessions200,
  Metaspecialties200,
  OpenAIProductTitle200,
  OpenAIProductTitleBody,
  ProductsGetUsersByVariantParams,
  ProductsGetUsersByVariantResponse,
  ProductsGetUsersImageBody,
  ProductsGetUsersImageResponse,
  ShippingBody,
  ShippingCalculateResponse,
  ShippingCreateResponse,
  ShippingGetResponse,
  UploadBody,
  UploadResponse,
  UserAvailabilityGeResponse,
  UserAvailabilityGenerateBody,
  UserAvailabilityGenerateResponse,
  UserAvailabilityGetBody,
  UserGetResponse,
  UserLocationGetResponse,
  UserProductsGetProductsBody,
  UserProductsGetProductsResponse,
  UserProductsGetResponse,
  UserProductsListByLocationResponse,
  UserProductsListByScheduleParams,
  UserProductsListByScheduleResponse,
  UserScheduleGetByLocationResponse,
  UserScheduleGetByProductIdResponse,
  UserSchedulesListLocations200,
  UserUsernameTakenResponse,
  UsersFiltersParams,
  UsersFiltersResponse,
  UsersProfessionsResponse,
  UsersSearchBody,
  UsersSearchParams,
  UsersSearchResponse,
  UsersTopParams,
  UsersTopResponse,
} from './model';
import {queryClient} from './mutator/query-client';
import type {BodyType} from './mutator/query-client';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getBookingShopifyApi = () => {
  /**
   * This endpoint creates new user
   * @summary POST Create user
   */
  const customerCreate = (
    customerCreateBody: BodyType<CustomerCreateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerCreateResponse>(
      {
        url: `/customer`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: customerCreateBody,
      },
      options,
    );
  };

  /**
   * This endpoint update user
   * @summary PUT Update user
   */
  const customerUpdate = (
    customerId: string,
    customerUpdateBody: BodyType<CustomerUpdateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerUpdateResponse>(
      {
        url: `/customer/${customerId}`,
        method: 'PUT',
        headers: {'Content-Type': 'application/json'},
        data: customerUpdateBody,
      },
      options,
    );
  };

  /**
   * This endpoint gets customer object
   * @summary GET Get customer
   */
  const customerGet = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerGetResponse>(
      {url: `/customer/${customerId}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint create new blocked
   * @summary POST Create blocked
   */
  const customerBlockedCreate = (
    customerId: string,
    customerBlockedCreateBody: BodyType<CustomerBlockedCreateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerBlockedCreateResponse>(
      {
        url: `/customer/${customerId}/blocked`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: customerBlockedCreateBody,
      },
      options,
    );
  };

  /**
   * This endpoint destroy blocked for customer
   * @summary DEL destroy blocked
   */
  const customerBlockedDestroy = (
    customerId: string,
    blockedId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerBlockedDestroyResponse>(
      {url: `/customer/${customerId}/blocked/${blockedId}`, method: 'DELETE'},
      options,
    );
  };

  /**
   * This endpoint get all blocked documents for customer
   * @summary GET Get all blocked documents for customer
   */
  const customerBlockedList = (
    customerId: string,
    params?: CustomerBlockedListParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerBlockedListResponse>(
      {url: `/customer/${customerId}/blocked/list`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint get all blocked documents
   * @summary GET Get all blocked documents for customer
   */
  const customerBlockedRange = (
    customerId: string,
    params: CustomerBlockedRangeParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerBlockedRangeResponse>(
      {url: `/customer/${customerId}/blocked/range`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint gets order with lineItems array of objects specific for groupId
   * @summary GET Get order with lineItems array for specific groupId
   */
  const customerBookingGetByGroup = (
    customerId: string,
    orderId: string,
    groupId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerBookingGetByGroupIdResponse>(
      {
        url: `/customer/${customerId}/bookings/${orderId}/group/${groupId}`,
        method: 'GET',
      },
      options,
    );
  };

  /**
   * This endpoint get all bookings from orders
   * @summary GET Get all bookings for customer from orders
   */
  const customerBookingRange = (
    customerId: string,
    params: CustomerBookingRangeParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerBookingRangeResponse>(
      {url: `/customer/${customerId}/bookings/range`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint get one location for user
   * @summary GET Get one location from user
   */
  const customerLocationGet = (
    customerId: string,
    locationId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerLocationGetResponse>(
      {url: `/customer/${customerId}/location/${locationId}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint remove location but does not delete location from db
   * @summary POST Remove location from user
   */
  const customerLocationRemove = (
    customerId: string,
    locationId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerLocationRemoveResponse>(
      {url: `/customer/${customerId}/location/${locationId}`, method: 'DELETE'},
      options,
    );
  };

  /**
   * This endpoint update existing location
   * @summary PUT Update location
   */
  const customerLocationUpdate = (
    customerId: string,
    locationId: string,
    customerLocationUpdateBody: BodyType<CustomerLocationUpdateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerLocationUpdateResponse>(
      {
        url: `/customer/${customerId}/location/${locationId}`,
        method: 'PUT',
        headers: {'Content-Type': 'application/json'},
        data: customerLocationUpdateBody,
      },
      options,
    );
  };

  /**
   * This endpoint get products belonging to the user
   * @summary GET Get products that belongs to location
   */
  const customerLocationGetProducts = (
    customerId: string,
    locationId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerLocationGetProductsResponse>(
      {
        url: `/customer/${customerId}/location/${locationId}/products`,
        method: 'GET',
      },
      options,
    );
  };

  /**
   * This endpoint set new default location for user
   * @summary POST Set new default location for user
   */
  const customerLocationSetDefault = (
    customerId: string,
    locationId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerLocationSetDefaultResponse>(
      {
        url: `/customer/${customerId}/location/${locationId}/setDefault`,
        method: 'PUT',
      },
      options,
    );
  };

  /**
   * This endpoint creates new location
   * @summary POST Create location origin or destination
   */
  const customerLocationCreate = (
    customerId: string,
    customerLocationCreateBody: BodyType<CustomerLocationCreateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerLocationCreateResponse>(
      {
        url: `/customer/${customerId}/locations`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: customerLocationCreateBody,
      },
      options,
    );
  };

  /**
   * This endpoint get all locations for user
   * @summary GET Get all locations for user
   */
  const customerLocationList = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerLocationListResponse>(
      {url: `/customer/${customerId}/locations`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint gets order with lineItems array of objects
   * @summary GET Get order with lineItems array
   */
  const customerOrderGet = (
    customerId: string,
    orderId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerOrderGetResponse>(
      {url: `/customer/${customerId}/orders/${orderId}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get all payouts
   * @summary GET get all payouts using paginate
   */
  const customerPayoutPaginate = (
    customerId: string,
    params: CustomerPayoutPaginateParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerPayoutPaginateResponse>(
      {url: `/customer/${customerId}/payouts/paginate`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint get payout balance
   * @summary GET get payout balance
   */
  const customerPayoutBalance = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerPayoutBalanceResponse>(
      {url: `/customer/${customerId}/payouts/balance`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get payout
   * @summary GET get payout
   */
  const customerPayoutGet = (
    customerId: string,
    payoutId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerPayoutGetResponse>(
      {url: `/customer/${customerId}/payout/${payoutId}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint create payout
   * @summary POST Create payout
   */
  const customerPayoutCreate = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerPayoutCreateResponse>(
      {url: `/customer/${customerId}/payout/create`, method: 'POST'},
      options,
    );
  };

  /**
   * This endpoint get all payout logs for specific payout
   * @summary GET get all payout logs for specific payout using paginate
   */
  const customerPayoutLogPaginate = (
    customerId: string,
    payoutId: string,
    params: CustomerPayoutLogPaginateParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerPayoutLogResponse>(
      {
        url: `/customer/${customerId}/payout-logs/${payoutId}/paginate`,
        method: 'GET',
        params,
      },
      options,
    );
  };

  /**
   * This endpoint create new payout account
   * @summary POST Create payout account
   */
  const customerPayoutAccountCreate = (
    customerId: string,
    customerPayoutAccountCreateBody: BodyType<CustomerPayoutAccountCreateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerPayoutAccountCreateResponse>(
      {
        url: `/customer/${customerId}/payout-account`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: customerPayoutAccountCreateBody,
      },
      options,
    );
  };

  /**
   * This endpoint get payout account
   * @summary GET get payout account
   */
  const customerPayoutAccountGet = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerPayoutAccountGetResponse>(
      {url: `/customer/${customerId}/payout-account`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint destroy payout account for customer
   * @summary DEL destroy payout account
   */
  const customerPayoutAccountDestroy = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerPayoutAccountDestroyResponse>(
      {url: `/customer/${customerId}/payout-account`, method: 'DELETE'},
      options,
    );
  };

  /**
   * This endpoint get products for customer
   * @summary GET Get products for customer
   */
  const customerProductsList = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductListResponse>(
      {url: `/customer/${customerId}/products`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get product ids for customer
   * @summary GET Get product ids for customer
   */
  const customerProductsListIds = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductListIdsResponse>(
      {url: `/customer/${customerId}/products/ids`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get product for customer
   * @summary GET Get product that exist in one of the schedules for customer
   */
  const customerProductGet = (
    customerId: string,
    productId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductGetResponse>(
      {url: `/customer/${customerId}/product/${productId}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint update product that exist in schedule
   * @summary PUT Update product in schedule
   */
  const customerProductUpdate = (
    customerId: string,
    productId: string,
    customerProductUpdateBody: BodyType<CustomerProductUpdateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductUpdateResponse>(
      {
        url: `/customer/${customerId}/product/${productId}`,
        method: 'PUT',
        headers: {'Content-Type': 'application/json'},
        data: customerProductUpdateBody,
      },
      options,
    );
  };

  /**
   * This endpoint remove product from schedule for customer
   * @summary DEL destroy product
   */
  const customerProductDestroy = (
    customerId: string,
    productId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductDestroyResponse>(
      {url: `/customer/${customerId}/product/${productId}`, method: 'DELETE'},
      options,
    );
  };

  /**
   * This endpoint add product that does not exist in schedule
   * @summary POST Add product to schedule
   */
  const customerProductAdd = (
    customerId: string,
    customerProductAddBody: BodyType<CustomerProductAddBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductAddResponse>(
      {
        url: `/customer/${customerId}/product`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: customerProductAddBody,
      },
      options,
    );
  };

  /**
   * This endpoint add product option to product
   * @summary POST Add product option to product
   */
  const customerProductOptionsAdd = (
    customerId: string,
    productId: string,
    customerProductOptionsAddBody: BodyType<CustomerProductOptionsAddBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductOptionsAddResponse>(
      {
        url: `/customer/${customerId}/product/${productId}/options`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: customerProductOptionsAddBody,
      },
      options,
    );
  };

  /**
   * This endpoint get product options for product
   * @summary GET Get product options for product
   */
  const customerProductOptionsList = (
    customerId: string,
    productId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductOptionsListResponse>(
      {
        url: `/customer/${customerId}/product/${productId}/options`,
        method: 'GET',
      },
      options,
    );
  };

  /**
   * This endpoint update product option that exist in product
   * @summary PUT Update product option in product
   */
  const customerProductOptionsUpdate = (
    customerId: string,
    productId: string,
    optionProductId: string,
    customerProductOptionsUpdateBody: BodyType<CustomerProductOptionsUpdateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductOptionsUpdateResponse>(
      {
        url: `/customer/${customerId}/product/${productId}/options/${optionProductId}`,
        method: 'PUT',
        headers: {'Content-Type': 'application/json'},
        data: customerProductOptionsUpdateBody,
      },
      options,
    );
  };

  /**
   * This endpoint remove product option from product for schedule
   * @summary DEL destroy product option
   */
  const customerProductOptionsDestroy = (
    customerId: string,
    productId: string,
    optionProductId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerProductOptionsDestroyResponse>(
      {
        url: `/customer/${customerId}/product/${productId}/options/${optionProductId}`,
        method: 'DELETE',
      },
      options,
    );
  };

  /**
   * This endpoint gets customer upload resource url, so customer can upload image
   * @summary GET Get customer upload resource url
   */
  const customerUploadResourceURL = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerUploadResourceURLResponse>(
      {url: `/customer/${customerId}/upload/resource-url`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint create new schedule
   * @summary POST Create schedule
   */
  const customerScheduleCreate = (
    customerId: string,
    customerScheduleCreateBody: BodyType<CustomerScheduleCreateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerScheduleCreateResponse>(
      {
        url: `/customer/${customerId}/schedule`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: customerScheduleCreateBody,
      },
      options,
    );
  };

  /**
   * This endpoint get all schedule for customer
   * @summary GET Get all schedule for customer
   */
  const customerScheduleList = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerScheduleListResponse>(
      {url: `/customer/${customerId}/schedules`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get schedule for customer
   * @summary GET Get schedule for customer
   */
  const customerScheduleGet = (
    customerId: string,
    scheduleId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerScheduleGetResponse>(
      {url: `/customer/${customerId}/schedule/${scheduleId}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint update schedule
   * @summary PUT Update schedule
   */
  const customerScheduleUpdate = (
    customerId: string,
    scheduleId: string,
    customerScheduleUpdateBody: BodyType<CustomerScheduleUpdateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerScheduleUpdateResponse>(
      {
        url: `/customer/${customerId}/schedule/${scheduleId}`,
        method: 'PUT',
        headers: {'Content-Type': 'application/json'},
        data: customerScheduleUpdateBody,
      },
      options,
    );
  };

  /**
   * This endpoint destroy schedule for customer
   * @summary DEL destroy schedule
   */
  const customerScheduleDestroy = (
    customerId: string,
    scheduleId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerScheduleDestroyResponse>(
      {url: `/customer/${customerId}/schedule/${scheduleId}`, method: 'DELETE'},
      options,
    );
  };

  /**
   * This endpoint update schedule slot
   * @summary PUT Update schedule slot
   */
  const customerScheduleSlotUpdate = (
    customerId: string,
    scheduleId: string,
    customerScheduleSlotsUpdateBody: BodyType<CustomerScheduleSlotsUpdateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerScheduleSlotsUpdateResponse>(
      {
        url: `/customer/${customerId}/schedule/${scheduleId}/slots`,
        method: 'PUT',
        headers: {'Content-Type': 'application/json'},
        data: customerScheduleSlotsUpdateBody,
      },
      options,
    );
  };

  /**
   * This endpoint gets customer status
   * @summary GET Get customer status
   */
  const customerStatus = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerStatusResponse>(
      {url: `/customer/${customerId}/status`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint return if customer is business or not
   * @summary GET Get customer is business
   */
  const customerIsBusiness = (
    customerId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<CustomerIsBusinessResponse>(
      {url: `/customer/${customerId}/isBusiness`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get coordinates object
   * @summary GET location coordinates
   */
  const locationGetCoordinates = (
    params?: LocationGetCoordinatesParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<LocationGetCoordinatesResponse>(
      {url: `/location/get-coordinates`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint gets traval time object
   * @summary GET location travel time
   */
  const locationGetTravelTime = (
    params?: LocationGetTravelTimeParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<LocationGetTravelTimeResponse>(
      {url: `/location/get-travel-time`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint get all professions
   * @summary GET Get all professions
   */
  const metaProfessions = (options?: SecondParameter<typeof queryClient>) => {
    return queryClient<MetaProfessions200>(
      {url: `/meta/professions`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get all specialties
   * @summary GET Get all specialties
   */
  const metaspecialties = (options?: SecondParameter<typeof queryClient>) => {
    return queryClient<Metaspecialties200>(
      {url: `/meta/specialties`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint is used to upload new image for customer
   * @summary POST Upload new customer image
   */
  const upload = (
    uploadBody: BodyType<UploadBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UploadResponse>(
      {
        url: `/orchestrators/upload`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: uploadBody,
      },
      options,
    );
  };

  /**
   * This endpoint respond with users images
   * @summary POST get users belongs to productIds array
   */
  const productsGetUsersImage = (
    productsGetUsersImageBody: BodyType<ProductsGetUsersImageBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<ProductsGetUsersImageResponse>(
      {
        url: `/products/get-users-image`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: productsGetUsersImageBody,
      },
      options,
    );
  };

  /**
   * This endpoint get all users for specific productId and variantId
   * @summary GET Get all users for specific productId and variantId
   */
  const productsGetUsersByVariant = (
    params: ProductsGetUsersByVariantParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<ProductsGetUsersByVariantResponse>(
      {url: `/products/get-users-by-variant`, method: 'GET', params},
      options,
    );
  };

  /**
   * @summary POST create shipping
   */
  const shippingCreate = (
    shippingBody: BodyType<ShippingBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<ShippingCreateResponse>(
      {
        url: `/shipping/create`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: shippingBody,
      },
      options,
    );
  };

  /**
   * @summary POST get shipping calculate
   */
  const shippingCalculate = (
    shippingBody: BodyType<ShippingBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<ShippingCalculateResponse>(
      {
        url: `/shipping/calculate`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: shippingBody,
      },
      options,
    );
  };

  /**
   * This endpoint gets shipping object
   * @summary GET Get shipping
   */
  const shippingGet = (
    shippingId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<ShippingGetResponse>(
      {url: `/shipping/${shippingId}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint generate availabilty for user
   * @summary POST generate availabilty for user
   */
  const userAvailabilityGenerate = (
    username: string,
    locationId: string,
    userAvailabilityGenerateBody: BodyType<UserAvailabilityGenerateBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserAvailabilityGenerateResponse>(
      {
        url: `/user/${username}/availability/${locationId}/generate`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: userAvailabilityGenerateBody,
      },
      options,
    );
  };

  /**
   * This endpoint get's one single availabilty for user
   * @summary POST get single availabilty for user
   */
  const userAvailabilityGet = (
    username: string,
    locationId: string,
    userAvailabilityGetBody: BodyType<UserAvailabilityGetBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserAvailabilityGeResponse>(
      {
        url: `/user/${username}/availability/${locationId}/get`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: userAvailabilityGetBody,
      },
      options,
    );
  };

  /**
   * This endpoint get one location for user
   * @summary GET Get one location from user
   */
  const userLocationGet = (
    username: string,
    locationId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserLocationGetResponse>(
      {url: `/user/${username}/location/${locationId}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint gets user object
   * @summary GET Get user
   */
  const userGet = (
    username: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserGetResponse>(
      {url: `/user/${username}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint return false or true
   * @summary GET check if username is taken
   */
  const userUsernameTaken = (
    username: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserUsernameTakenResponse>(
      {url: `/user/${username}/username-taken`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get products for user (across all schedules or one scheduleId)
   * @summary GET Get products for user
   */
  const userProductsListBySchedule = (
    username: string,
    params?: UserProductsListByScheduleParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserProductsListByScheduleResponse>(
      {url: `/user/${username}/products`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint get product for customer
   * @summary GET Get product that exist in one of the schedules for customer
   */
  const userProductGet = (
    username: string,
    productHandle: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserProductsGetResponse>(
      {url: `/user/${username}/products/${productHandle}`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get products from one schedule by location
   * @summary GET Get products for user
   */
  const userProductsGetProducts = (
    username: string,
    locationId: string,
    userProductsGetProductsBody: BodyType<UserProductsGetProductsBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserProductsGetProductsResponse>(
      {
        url: `/user/${username}/products/location/${locationId}`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: userProductsGetProductsBody,
      },
      options,
    );
  };

  /**
   * This endpoint is intended to be used when we need to fetch related products from the same schedule and same location.
   * @summary GET Get products for user
   */
  const userProductsListByLocation = (
    username: string,
    productHandle: string,
    locationId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserProductsListByLocationResponse>(
      {
        url: `/user/${username}/product/${productHandle}/location/${locationId}`,
        method: 'GET',
      },
      options,
    );
  };

  /**
   * This endpoint should retrieve a schedule and locations belonging to a specific productHandle, along with the product.
   * @summary GET Get user schedule
   */
  const userScheduleGetByProduct = (
    username: string,
    productHandle: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserScheduleGetByProductIdResponse>(
      {
        url: `/user/${username}/schedule/get-by-product-id/${productHandle}`,
        method: 'GET',
      },
      options,
    );
  };

  /**
   * This endpoint should retrieve a schedule with products that only belong to a specific locationId.
   * @summary GET Get user schedule
   */
  const userScheduleGetByLocation = (
    username: string,
    scheduleId: string,
    locationId: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserScheduleGetByLocationResponse>(
      {
        url: `/user/${username}/schedule/${scheduleId}/location/${locationId}`,
        method: 'GET',
      },
      options,
    );
  };

  /**
   * This endpoint should return all locations present in all schedules for specific user
   * @summary GET Get schedules for user
   */
  const userSchedulesListLocations = (
    username: string,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UserSchedulesListLocations200>(
      {url: `/user/${username}/schedules/locations`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get all users professions
   * @summary GET Get all users professions with total count
   */
  const usersProfessions = (options?: SecondParameter<typeof queryClient>) => {
    return queryClient<UsersProfessionsResponse>(
      {url: `/users/professions`, method: 'GET'},
      options,
    );
  };

  /**
   * This endpoint get all users-filters
   * @summary GET Get all users-filters
   */
  const usersFilters = (
    params?: UsersFiltersParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UsersFiltersResponse>(
      {url: `/users/filters`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint search for users
   * @summary POST Post search for users
   */
  const usersSearch = (
    usersSearchBody: BodyType<UsersSearchBody>,
    params?: UsersSearchParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UsersSearchResponse>(
      {
        url: `/users/search`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: usersSearchBody,
        params,
      },
      options,
    );
  };

  /**
   * This endpoint get all users group by professions
   * @summary GET Get all users grouped by professions
   */
  const usersTop = (
    params?: UsersTopParams,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<UsersTopResponse>(
      {url: `/users/top`, method: 'GET', params},
      options,
    );
  };

  /**
   * This endpoint correct any grammatical errors in title and description
   * @summary POST Correct any grammatical errors in title and description
   */
  const openAIProductTitle = (
    openAIProductTitleBody: BodyType<OpenAIProductTitleBody>,
    options?: SecondParameter<typeof queryClient>,
  ) => {
    return queryClient<OpenAIProductTitle200>(
      {
        url: `/openai/products-title`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        data: openAIProductTitleBody,
      },
      options,
    );
  };

  return {
    customerCreate,
    customerUpdate,
    customerGet,
    customerBlockedCreate,
    customerBlockedDestroy,
    customerBlockedList,
    customerBlockedRange,
    customerBookingGetByGroup,
    customerBookingRange,
    customerLocationGet,
    customerLocationRemove,
    customerLocationUpdate,
    customerLocationGetProducts,
    customerLocationSetDefault,
    customerLocationCreate,
    customerLocationList,
    customerOrderGet,
    customerPayoutPaginate,
    customerPayoutBalance,
    customerPayoutGet,
    customerPayoutCreate,
    customerPayoutLogPaginate,
    customerPayoutAccountCreate,
    customerPayoutAccountGet,
    customerPayoutAccountDestroy,
    customerProductsList,
    customerProductsListIds,
    customerProductGet,
    customerProductUpdate,
    customerProductDestroy,
    customerProductAdd,
    customerProductOptionsAdd,
    customerProductOptionsList,
    customerProductOptionsUpdate,
    customerProductOptionsDestroy,
    customerUploadResourceURL,
    customerScheduleCreate,
    customerScheduleList,
    customerScheduleGet,
    customerScheduleUpdate,
    customerScheduleDestroy,
    customerScheduleSlotUpdate,
    customerStatus,
    customerIsBusiness,
    locationGetCoordinates,
    locationGetTravelTime,
    metaProfessions,
    metaspecialties,
    upload,
    productsGetUsersImage,
    productsGetUsersByVariant,
    shippingCreate,
    shippingCalculate,
    shippingGet,
    userAvailabilityGenerate,
    userAvailabilityGet,
    userLocationGet,
    userGet,
    userUsernameTaken,
    userProductsListBySchedule,
    userProductGet,
    userProductsGetProducts,
    userProductsListByLocation,
    userScheduleGetByProduct,
    userScheduleGetByLocation,
    userSchedulesListLocations,
    usersProfessions,
    usersFilters,
    usersSearch,
    usersTop,
    openAIProductTitle,
  };
};
export type CustomerCreateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['customerCreate']>>
>;
export type CustomerUpdateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['customerUpdate']>>
>;
export type CustomerGetResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['customerGet']>>
>;
export type CustomerBlockedCreateResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerBlockedCreate']>
  >
>;
export type CustomerBlockedDestroyResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerBlockedDestroy']
    >
  >
>;
export type CustomerBlockedListResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerBlockedList']>
  >
>;
export type CustomerBlockedRangeResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerBlockedRange']>
  >
>;
export type CustomerBookingGetByGroupResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerBookingGetByGroup']
    >
  >
>;
export type CustomerBookingRangeResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerBookingRange']>
  >
>;
export type CustomerLocationGetResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerLocationGet']>
  >
>;
export type CustomerLocationRemoveResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerLocationRemove']
    >
  >
>;
export type CustomerLocationUpdateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerLocationUpdate']
    >
  >
>;
export type CustomerLocationGetProductsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerLocationGetProducts']
    >
  >
>;
export type CustomerLocationSetDefaultResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerLocationSetDefault']
    >
  >
>;
export type CustomerLocationCreateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerLocationCreate']
    >
  >
>;
export type CustomerLocationListResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerLocationList']>
  >
>;
export type CustomerOrderGetResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerOrderGet']>
  >
>;
export type CustomerPayoutPaginateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerPayoutPaginate']
    >
  >
>;
export type CustomerPayoutBalanceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerPayoutBalance']>
  >
>;
export type CustomerPayoutGetResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerPayoutGet']>
  >
>;
export type CustomerPayoutCreateResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerPayoutCreate']>
  >
>;
export type CustomerPayoutLogPaginateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerPayoutLogPaginate']
    >
  >
>;
export type CustomerPayoutAccountCreateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerPayoutAccountCreate']
    >
  >
>;
export type CustomerPayoutAccountGetResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerPayoutAccountGet']
    >
  >
>;
export type CustomerPayoutAccountDestroyResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerPayoutAccountDestroy']
    >
  >
>;
export type CustomerProductsListResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerProductsList']>
  >
>;
export type CustomerProductsListIdsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerProductsListIds']
    >
  >
>;
export type CustomerProductGetResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerProductGet']>
  >
>;
export type CustomerProductUpdateResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerProductUpdate']>
  >
>;
export type CustomerProductDestroyResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerProductDestroy']
    >
  >
>;
export type CustomerProductAddResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerProductAdd']>
  >
>;
export type CustomerProductOptionsAddResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerProductOptionsAdd']
    >
  >
>;
export type CustomerProductOptionsListResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerProductOptionsList']
    >
  >
>;
export type CustomerProductOptionsUpdateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerProductOptionsUpdate']
    >
  >
>;
export type CustomerProductOptionsDestroyResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerProductOptionsDestroy']
    >
  >
>;
export type CustomerUploadResourceURLResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerUploadResourceURL']
    >
  >
>;
export type CustomerScheduleCreateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerScheduleCreate']
    >
  >
>;
export type CustomerScheduleListResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerScheduleList']>
  >
>;
export type CustomerScheduleGetResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerScheduleGet']>
  >
>;
export type CustomerScheduleUpdateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerScheduleUpdate']
    >
  >
>;
export type CustomerScheduleDestroyResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerScheduleDestroy']
    >
  >
>;
export type CustomerScheduleSlotUpdateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['customerScheduleSlotUpdate']
    >
  >
>;
export type CustomerStatusResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['customerStatus']>>
>;
export type CustomerIsBusinessResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['customerIsBusiness']>
  >
>;
export type LocationGetCoordinatesResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['locationGetCoordinates']
    >
  >
>;
export type LocationGetTravelTimeResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['locationGetTravelTime']>
  >
>;
export type MetaProfessionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['metaProfessions']>
  >
>;
export type MetaspecialtiesResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['metaspecialties']>
  >
>;
export type UploadResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['upload']>>
>;
export type ProductsGetUsersImageResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['productsGetUsersImage']>
  >
>;
export type ProductsGetUsersByVariantResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['productsGetUsersByVariant']
    >
  >
>;
export type ShippingCreateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['shippingCreate']>>
>;
export type ShippingCalculateResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['shippingCalculate']>
  >
>;
export type ShippingGetResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['shippingGet']>>
>;
export type UserAvailabilityGenerateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['userAvailabilityGenerate']
    >
  >
>;
export type UserAvailabilityGetResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['userAvailabilityGet']>
  >
>;
export type UserLocationGetResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['userLocationGet']>
  >
>;
export type UserGetResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['userGet']>>
>;
export type UserUsernameTakenResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['userUsernameTaken']>
  >
>;
export type UserProductsListByScheduleResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['userProductsListBySchedule']
    >
  >
>;
export type UserProductGetResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['userProductGet']>>
>;
export type UserProductsGetProductsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['userProductsGetProducts']
    >
  >
>;
export type UserProductsListByLocationResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['userProductsListByLocation']
    >
  >
>;
export type UserScheduleGetByProductResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['userScheduleGetByProduct']
    >
  >
>;
export type UserScheduleGetByLocationResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['userScheduleGetByLocation']
    >
  >
>;
export type UserSchedulesListLocationsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBookingShopifyApi>['userSchedulesListLocations']
    >
  >
>;
export type UsersProfessionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['usersProfessions']>
  >
>;
export type UsersFiltersResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['usersFilters']>>
>;
export type UsersSearchResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['usersSearch']>>
>;
export type UsersTopResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getBookingShopifyApi>['usersTop']>>
>;
export type OpenAIProductTitleResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBookingShopifyApi>['openAIProductTitle']>
  >
>;
