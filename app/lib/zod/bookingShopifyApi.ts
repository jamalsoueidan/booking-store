/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Booking Shopify Api
 * OpenAPI spec version: 1.0.0
 */
import {z as zod} from 'zod';

/**
 * This endpoint gets user object
 * @summary GET Get user
 */
export const userGetResponse = zod.object({
  success: zod.boolean(),
  payload: zod
    .object({
      customerId: zod.number(),
      yearsExperience: zod.string(),
      professions: zod.array(zod.string()),
      specialties: zod.array(zod.string()).optional(),
      username: zod.string().optional(),
      aboutMe: zod.string(),
      shortDescription: zod.string(),
      gender: zod.string().optional(),
      social: zod
        .object({
          youtube: zod.string().optional(),
          twitter: zod.string().optional(),
          instagram: zod.string().optional(),
        })
        .optional(),
      images: zod
        .object({
          profile: zod
            .object({
              url: zod.string().url().optional(),
              width: zod.number().optional(),
              height: zod.number().optional(),
            })
            .optional(),
        })
        .optional(),
      speaks: zod.array(zod.string()),
      fullname: zod.string(),
      active: zod.boolean(),
      email: zod.string().email().optional(),
      phone: zod.string().optional(),
    })
    .and(
      zod.object({
        schedules: zod.array(
          zod.object({
            _id: zod.string(),
            name: zod.string(),
            customerId: zod.number(),
            slots: zod.array(
              zod.object({
                day: zod.enum([
                  'monday',
                  'tuesday',
                  'wednesday',
                  'thursday',
                  'friday',
                  'saturday',
                  'sunday',
                ]),
                intervals: zod.array(
                  zod.object({
                    from: zod.string(),
                    to: zod.string(),
                  }),
                ),
              }),
            ),
            locations: zod.array(
              zod.object({
                _id: zod.string(),
                locationType: zod.enum(['origin', 'destination']),
                customerId: zod.string(),
                originType: zod.enum(['home', 'commercial']),
                name: zod.string(),
                fullAddress: zod.string(),
                geoLocation: zod.object({
                  type: zod.enum(['Point']),
                  coordinates: zod.array(zod.number()),
                }),
                distanceForFree: zod.number(),
                distanceHourlyRate: zod.number(),
                fixedRatePerKm: zod.number(),
                minDriveDistance: zod.number().or(zod.string()),
                maxDriveDistance: zod.number().or(zod.string()),
                startFee: zod.number().or(zod.string()).optional(),
              }),
            ),
          }),
        ),
      }),
    ),
});

/**
 * This endpoint gets user schedule object
 * @summary GET Get user schedule
 */
export const userScheduleGetParams = zod.object({
  username: zod.string(),
  scheduleId: zod.string(),
  locationId: zod.string(),
});

export const userScheduleGetResponse = zod.object({
  success: zod.boolean(),
  payload: zod
    .object({
      _id: zod.string(),
      name: zod.string(),
      customerId: zod.number(),
      slots: zod.array(
        zod.object({
          day: zod.enum([
            'monday',
            'tuesday',
            'wednesday',
            'thursday',
            'friday',
            'saturday',
            'sunday',
          ]),
          intervals: zod.array(
            zod.object({
              from: zod.string(),
              to: zod.string(),
            }),
          ),
        }),
      ),
      locations: zod.array(
        zod.object({
          _id: zod.string(),
          locationType: zod.enum(['origin', 'destination']),
          customerId: zod.string(),
          originType: zod.enum(['home', 'commercial']),
          name: zod.string(),
          fullAddress: zod.string(),
          geoLocation: zod.object({
            type: zod.enum(['Point']),
            coordinates: zod.array(zod.number()),
          }),
          distanceForFree: zod.number(),
          distanceHourlyRate: zod.number(),
          fixedRatePerKm: zod.number(),
          minDriveDistance: zod.number().or(zod.string()),
          maxDriveDistance: zod.number().or(zod.string()),
          startFee: zod.number().or(zod.string()).optional(),
        }),
      ),
    })
    .and(
      zod.object({
        products: zod.array(
          zod
            .object({
              productId: zod.number(),
              variantId: zod.number(),
              description: zod.string().optional(),
              duration: zod.string().or(zod.number()),
              breakTime: zod.string().or(zod.number()),
              noticePeriod: zod.object({
                value: zod.string().or(zod.number()),
                unit: zod.enum(['hours', 'days', 'weeks']),
              }),
              bookingPeriod: zod.object({
                value: zod.string().or(zod.number()),
                unit: zod.enum(['weeks', 'months']),
              }),
            })
            .and(
              zod.object({
                locations: zod.array(
                  zod.object({
                    _id: zod.string(),
                    locationType: zod.enum(['origin', 'destination']),
                    customerId: zod.string(),
                    originType: zod.enum(['home', 'commercial']),
                    name: zod.string(),
                    fullAddress: zod.string(),
                    geoLocation: zod.object({
                      type: zod.enum(['Point']),
                      coordinates: zod.array(zod.number()),
                    }),
                    distanceForFree: zod.number(),
                    distanceHourlyRate: zod.number(),
                    fixedRatePerKm: zod.number(),
                    minDriveDistance: zod.number().or(zod.string()),
                    maxDriveDistance: zod.number().or(zod.string()),
                    startFee: zod.number().or(zod.string()).optional(),
                  }),
                ),
              }),
            ),
        ),
      }),
    ),
});

/**
 * This endpoint get all users
 * @summary GET Get all users professions with total count
 */
export const usersProfessionsResponse = zod.object({
  success: zod.boolean(),
  payload: zod.record(zod.string(), zod.number()),
});

/**
 * This endpoint get all users
 * @summary GET Get all users
 */
export const usersListResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    nextCursor: zod.string().optional(),
    results: zod.array(
      zod.object({
        customerId: zod.number(),
        yearsExperience: zod.string(),
        professions: zod.array(zod.string()),
        specialties: zod.array(zod.string()).optional(),
        username: zod.string().optional(),
        aboutMe: zod.string(),
        shortDescription: zod.string(),
        gender: zod.string().optional(),
        social: zod
          .object({
            youtube: zod.string().optional(),
            twitter: zod.string().optional(),
            instagram: zod.string().optional(),
          })
          .optional(),
        images: zod
          .object({
            profile: zod
              .object({
                url: zod.string().url().optional(),
                width: zod.number().optional(),
                height: zod.number().optional(),
              })
              .optional(),
          })
          .optional(),
        speaks: zod.array(zod.string()),
        fullname: zod.string(),
        active: zod.boolean(),
        email: zod.string().email().optional(),
        phone: zod.string().optional(),
      }),
    ),
  }),
});

/**
 * This endpoint creates new or updates user
 * @summary PUT Create or Update user (restricted fields)
 */
export const customerUpsertParams = zod.object({
  customerId: zod.string(),
});

export const customerUpsertBodyUsernameRegExp = new RegExp('^[a-zA-Z0-9-_]+$');

export const customerUpsertBody = zod.object({
  professions: zod.array(zod.string()).or(zod.string()),
  specialties: zod.array(zod.string()).or(zod.string()),
  username: zod.string().regex(customerUpsertBodyUsernameRegExp),
  aboutMe: zod.string(),
  shortDescription: zod.string(),
  social: zod
    .object({
      youtube: zod.string().optional(),
      twitter: zod.string().optional(),
      instagram: zod.string().optional(),
    })
    .optional(),
  speaks: zod.array(zod.string()).or(zod.string()).optional(),
});

export const customerUpsertResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    customerId: zod.number(),
    yearsExperience: zod.string(),
    professions: zod.array(zod.string()),
    specialties: zod.array(zod.string()).optional(),
    username: zod.string().optional(),
    aboutMe: zod.string(),
    shortDescription: zod.string(),
    gender: zod.string().optional(),
    social: zod
      .object({
        youtube: zod.string().optional(),
        twitter: zod.string().optional(),
        instagram: zod.string().optional(),
      })
      .optional(),
    images: zod
      .object({
        profile: zod
          .object({
            url: zod.string().url().optional(),
            width: zod.number().optional(),
            height: zod.number().optional(),
          })
          .optional(),
      })
      .optional(),
    speaks: zod.array(zod.string()),
    fullname: zod.string(),
    active: zod.boolean(),
    email: zod.string().email().optional(),
    phone: zod.string().optional(),
  }),
});

/**
 * This endpoint gets customer object
 * @summary GET Get customer
 */
export const customerGetParams = zod.object({
  customerId: zod.string(),
});

export const customerGetResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    customerId: zod.number(),
    yearsExperience: zod.string(),
    professions: zod.array(zod.string()),
    specialties: zod.array(zod.string()).optional(),
    username: zod.string().optional(),
    aboutMe: zod.string(),
    shortDescription: zod.string(),
    gender: zod.string().optional(),
    social: zod
      .object({
        youtube: zod.string().optional(),
        twitter: zod.string().optional(),
        instagram: zod.string().optional(),
      })
      .optional(),
    images: zod
      .object({
        profile: zod
          .object({
            url: zod.string().url().optional(),
            width: zod.number().optional(),
            height: zod.number().optional(),
          })
          .optional(),
      })
      .optional(),
    speaks: zod.array(zod.string()),
    fullname: zod.string(),
    active: zod.boolean(),
    email: zod.string().email().optional(),
    phone: zod.string().optional(),
  }),
});

/**
 * This endpoint gets customer status
 * @summary GET Get customer status
 */
export const customerStatusParams = zod.object({
  customerId: zod.string(),
});

export const customerStatusResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    profile: zod.boolean(),
    locations: zod.boolean(),
    schedules: zod.boolean(),
    services: zod.boolean(),
    profileImage: zod.boolean(),
  }),
});

/**
 * This endpoint creates new or updates user
 * @summary PUT Create or Update user (all fields allowed)
 */
export const customerUpdateParams = zod.object({
  customerId: zod.string(),
});

export const customerUpdateBody = zod.object({
  customerId: zod.number().optional(),
  yearsExperience: zod.string().optional(),
  professions: zod.array(zod.string()).or(zod.string()).optional(),
  specialties: zod.array(zod.string()).or(zod.string()).optional(),
  username: zod.string().optional(),
  aboutMe: zod.string().optional(),
  shortDescription: zod.string().optional(),
  gender: zod.string().optional(),
  social: zod
    .object({
      youtube: zod.string().optional(),
      twitter: zod.string().optional(),
      instagram: zod.string().optional(),
    })
    .optional(),
  images: zod
    .object({
      profile: zod
        .object({
          url: zod.string().url().optional(),
          width: zod.number().optional(),
          height: zod.number().optional(),
        })
        .optional(),
    })
    .optional(),
  speaks: zod.array(zod.string()).or(zod.string()).optional(),
  fullname: zod.string().optional(),
  active: zod.boolean().optional(),
  email: zod.string().email().optional(),
  phone: zod.string().optional(),
});

export const customerUpdateResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    customerId: zod.number(),
    yearsExperience: zod.string(),
    professions: zod.array(zod.string()),
    specialties: zod.array(zod.string()).optional(),
    username: zod.string().optional(),
    aboutMe: zod.string(),
    shortDescription: zod.string(),
    gender: zod.string().optional(),
    social: zod
      .object({
        youtube: zod.string().optional(),
        twitter: zod.string().optional(),
        instagram: zod.string().optional(),
      })
      .optional(),
    images: zod
      .object({
        profile: zod
          .object({
            url: zod.string().url().optional(),
            width: zod.number().optional(),
            height: zod.number().optional(),
          })
          .optional(),
      })
      .optional(),
    speaks: zod.array(zod.string()),
    fullname: zod.string(),
    active: zod.boolean(),
    email: zod.string().email().optional(),
    phone: zod.string().optional(),
  }),
});

/**
 * This endpoint return if customer is business or not
 * @summary GET Get customer is business
 */
export const customerIsBusinessParams = zod.object({
  customerId: zod.string(),
});

export const customerIsBusinessResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    isBusiness: zod.boolean().optional(),
  }),
});

/**
 * This endpoint get products for customer
 * @summary GET Get products for customer
 */
export const customerProductsListResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(
    zod
      .object({
        productId: zod.number(),
        variantId: zod.number(),
        description: zod.string().optional(),
        duration: zod.string().or(zod.number()),
        breakTime: zod.string().or(zod.number()),
        noticePeriod: zod.object({
          value: zod.string().or(zod.number()),
          unit: zod.enum(['hours', 'days', 'weeks']),
        }),
        bookingPeriod: zod.object({
          value: zod.string().or(zod.number()),
          unit: zod.enum(['weeks', 'months']),
        }),
      })
      .and(
        zod.object({
          locations: zod.array(
            zod.object({
              location: zod.string(),
              locationType: zod.enum(['origin', 'destination']),
            }),
          ),
        }),
      )
      .and(
        zod.object({
          scheduleId: zod.string(),
          scheduleName: zod.string(),
        }),
      ),
  ),
});

/**
 * This endpoint get product ids for customer
 * @summary GET Get product ids for customer
 */
export const customerProductsListIdsResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(zod.number()),
});

/**
 * This availabilty for customer
 * @summary POST get availabilty for customer
 */
export const customerAvailabilityGetBody = zod.object({
  startDate: zod.string(),
  productIds: zod.array(zod.string()),
  shippingId: zod.string().optional(),
});

export const customerAvailabilityGetResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(
    zod.object({
      date: zod.string(),
      customer: zod.object({
        customerId: zod.string(),
        fullname: zod.string(),
      }),
      shipping: zod
        .object({
          _id: zod.string(),
          location: zod.string().optional(),
          origin: zod.object({
            customerId: zod.string().optional(),
            name: zod.string().optional(),
            fullAddress: zod.string().optional(),
            distanceForFree: zod.number().optional(),
            distanceHourlyRate: zod.number().optional(),
            fixedRatePerKm: zod.number().optional(),
            startFee: zod.number().optional(),
          }),
          destination: zod.object({
            name: zod.string().optional(),
            fullAddress: zod.string().optional(),
          }),
          duration: zod.object({
            text: zod.string().optional(),
            value: zod.number().optional(),
          }),
          distance: zod.object({
            text: zod.string().optional(),
            value: zod.number().optional(),
          }),
          cost: zod.number(),
        })
        .optional(),
      slots: zod.array(
        zod.object({
          from: zod.string(),
          to: zod.string(),
          products: zod.array(
            zod.object({
              productId: zod.number(),
              variantId: zod.number(),
              from: zod.string(),
              to: zod.string(),
              breakTime: zod.number(),
              duration: zod.number(),
            }),
          ),
        }),
      ),
    }),
  ),
});

/**
 * This endpoint get product for customer
 * @summary GET Get product that exist in one of the schedules for customer
 */
export const customerProductGetResponse = zod.object({
  success: zod.boolean(),
  payload: zod
    .object({
      productId: zod.number(),
      variantId: zod.number(),
      description: zod.string().optional(),
      duration: zod.string().or(zod.number()),
      breakTime: zod.string().or(zod.number()),
      noticePeriod: zod.object({
        value: zod.string().or(zod.number()),
        unit: zod.enum(['hours', 'days', 'weeks']),
      }),
      bookingPeriod: zod.object({
        value: zod.string().or(zod.number()),
        unit: zod.enum(['weeks', 'months']),
      }),
    })
    .and(
      zod.object({
        locations: zod.array(
          zod.object({
            location: zod.string(),
            locationType: zod.enum(['origin', 'destination']),
          }),
        ),
      }),
    )
    .and(
      zod.object({
        scheduleId: zod.string(),
        scheduleName: zod.string(),
      }),
    ),
});

/**
 * This endpoint update product that exist in schedule
 * @summary PUT Upsert product to schedule
 */
export const customerProductUpsertBody = zod.object({
  scheduleId: zod.string(),
  variantId: zod.string().or(zod.number()),
  duration: zod.string().or(zod.number()),
  breakTime: zod.string().or(zod.number()),
  noticePeriod: zod.object({
    value: zod.string().or(zod.number()),
    unit: zod.enum(['hours', 'days', 'weeks']),
  }),
  bookingPeriod: zod.object({
    value: zod.string().or(zod.number()),
    unit: zod.enum(['weeks', 'months']),
  }),
  locations: zod.array(
    zod.object({
      location: zod.string(),
      locationType: zod.enum(['origin', 'destination']),
    }),
  ),
});

export const customerProductUpsertResponse = zod.object({
  success: zod.boolean(),
  payload: zod
    .object({
      productId: zod.number(),
      variantId: zod.number(),
      description: zod.string().optional(),
      duration: zod.string().or(zod.number()),
      breakTime: zod.string().or(zod.number()),
      noticePeriod: zod.object({
        value: zod.string().or(zod.number()),
        unit: zod.enum(['hours', 'days', 'weeks']),
      }),
      bookingPeriod: zod.object({
        value: zod.string().or(zod.number()),
        unit: zod.enum(['weeks', 'months']),
      }),
    })
    .and(
      zod.object({
        locations: zod.array(
          zod.object({
            location: zod.string(),
            locationType: zod.enum(['origin', 'destination']),
          }),
        ),
      }),
    )
    .and(
      zod.object({
        scheduleId: zod.string(),
        scheduleName: zod.string(),
      }),
    ),
});

/**
 * This endpoint remove product from schedule for customer
 * @summary DEL destroy product
 */
export const customerProductDestroyResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    matchedCount: zod.number(),
    modifiedCount: zod.number(),
    upsertedCount: zod.number(),
  }),
});

/**
 * This endpoint gets booking object
 * @summary GET Get booking
 */
export const customerBookingGetParams = zod.object({
  customerId: zod.string(),
  orderId: zod.string(),
});

export const customerBookingGetQueryParams = zod.object({
  date: zod.string(),
});

export const customerBookingGetResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    orderId: zod.number(),
    buyer: zod.object({
      id: zod.number(),
      fullName: zod.string(),
      phone: zod.string(),
      email: zod.string(),
    }),
    lineItems: zod.array(
      zod.object({
        customerId: zod.number(),
        from: zod.string().datetime(),
        to: zod.string().datetime(),
        productId: zod.number(),
        variantId: zod.number(),
        lineItemId: zod.number(),
        title: zod.string(),
        priceSet: zod.object({
          amount: zod.string(),
          currency_code: zod.string(),
        }),
        totalDiscountSet: zod.object({
          amount: zod.string(),
          currency_code: zod.string(),
        }),
        status: zod.enum([
          'fulfilled',
          'onhold',
          'unfulfilled',
          'cancelled',
          'refunded',
        ]),
      }),
    ),
    cancelReason: zod.string(),
    cancelledAt: zod.string().datetime(),
  }),
});

/**
 * This endpoint get all bookings
 * @summary GET Get all bookings for customer
 */
export const customerBookingsListParams = zod.object({
  customerId: zod.string(),
});

export const customerBookingsListQueryParams = zod.object({
  mode: zod.enum(['completed', 'upcoming']),
});

export const customerBookingsListResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(
    zod.object({
      orderId: zod.number(),
      buyer: zod.object({
        id: zod.number(),
        fullName: zod.string(),
        phone: zod.string(),
        email: zod.string(),
      }),
      lineItems: zod.array(
        zod.object({
          customerId: zod.number(),
          from: zod.string().datetime(),
          to: zod.string().datetime(),
          productId: zod.number(),
          variantId: zod.number(),
          lineItemId: zod.number(),
          title: zod.string(),
          priceSet: zod.object({
            amount: zod.string(),
            currency_code: zod.string(),
          }),
          totalDiscountSet: zod.object({
            amount: zod.string(),
            currency_code: zod.string(),
          }),
          status: zod.enum([
            'fulfilled',
            'onhold',
            'unfulfilled',
            'cancelled',
            'refunded',
          ]),
        }),
      ),
      cancelReason: zod.string(),
      cancelledAt: zod.string().datetime(),
    }),
  ),
});

/**
 * This endpoint create new schedule
 * @summary POST Create schedule
 */
export const customerScheduleCreateBody = zod.object({
  name: zod.string(),
});

export const customerScheduleCreateResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    _id: zod.string(),
    name: zod.string(),
    customerId: zod.number(),
    slots: zod.array(
      zod.object({
        day: zod.enum([
          'monday',
          'tuesday',
          'wednesday',
          'thursday',
          'friday',
          'saturday',
          'sunday',
        ]),
        intervals: zod.array(
          zod.object({
            from: zod.string(),
            to: zod.string(),
          }),
        ),
      }),
    ),
    products: zod.array(
      zod
        .object({
          productId: zod.number(),
          variantId: zod.number(),
          description: zod.string().optional(),
          duration: zod.string().or(zod.number()),
          breakTime: zod.string().or(zod.number()),
          noticePeriod: zod.object({
            value: zod.string().or(zod.number()),
            unit: zod.enum(['hours', 'days', 'weeks']),
          }),
          bookingPeriod: zod.object({
            value: zod.string().or(zod.number()),
            unit: zod.enum(['weeks', 'months']),
          }),
        })
        .and(
          zod.object({
            locations: zod.array(
              zod.object({
                location: zod.string(),
                locationType: zod.enum(['origin', 'destination']),
              }),
            ),
          }),
        ),
    ),
  }),
});

/**
 * This endpoint get all schedule for customer
 * @summary GET Get all schedule for customer
 */
export const customerScheduleListResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(
    zod.object({
      _id: zod.string(),
      name: zod.string(),
      customerId: zod.number(),
      slots: zod.array(
        zod.object({
          day: zod.enum([
            'monday',
            'tuesday',
            'wednesday',
            'thursday',
            'friday',
            'saturday',
            'sunday',
          ]),
          intervals: zod.array(
            zod.object({
              from: zod.string(),
              to: zod.string(),
            }),
          ),
        }),
      ),
      products: zod.array(
        zod
          .object({
            productId: zod.number(),
            variantId: zod.number(),
            description: zod.string().optional(),
            duration: zod.string().or(zod.number()),
            breakTime: zod.string().or(zod.number()),
            noticePeriod: zod.object({
              value: zod.string().or(zod.number()),
              unit: zod.enum(['hours', 'days', 'weeks']),
            }),
            bookingPeriod: zod.object({
              value: zod.string().or(zod.number()),
              unit: zod.enum(['weeks', 'months']),
            }),
          })
          .and(
            zod.object({
              locations: zod.array(
                zod.object({
                  location: zod.string(),
                  locationType: zod.enum(['origin', 'destination']),
                }),
              ),
            }),
          ),
      ),
    }),
  ),
});

/**
 * This endpoint get schedule for customer
 * @summary GET Get schedule for customer
 */
export const customerScheduleGetResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    _id: zod.string(),
    name: zod.string(),
    customerId: zod.number(),
    slots: zod.array(
      zod.object({
        day: zod.enum([
          'monday',
          'tuesday',
          'wednesday',
          'thursday',
          'friday',
          'saturday',
          'sunday',
        ]),
        intervals: zod.array(
          zod.object({
            from: zod.string(),
            to: zod.string(),
          }),
        ),
      }),
    ),
    products: zod.array(
      zod
        .object({
          productId: zod.number(),
          variantId: zod.number(),
          description: zod.string().optional(),
          duration: zod.string().or(zod.number()),
          breakTime: zod.string().or(zod.number()),
          noticePeriod: zod.object({
            value: zod.string().or(zod.number()),
            unit: zod.enum(['hours', 'days', 'weeks']),
          }),
          bookingPeriod: zod.object({
            value: zod.string().or(zod.number()),
            unit: zod.enum(['weeks', 'months']),
          }),
        })
        .and(
          zod.object({
            locations: zod.array(
              zod.object({
                location: zod.string(),
                locationType: zod.enum(['origin', 'destination']),
              }),
            ),
          }),
        ),
    ),
  }),
});

/**
 * This endpoint update schedule
 * @summary PUT Update schedule
 */
export const customerScheduleUpdateBody = zod.object({
  name: zod.string(),
});

export const customerScheduleUpdateResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    _id: zod.string(),
    name: zod.string(),
    customerId: zod.number(),
    slots: zod.array(
      zod.object({
        day: zod.enum([
          'monday',
          'tuesday',
          'wednesday',
          'thursday',
          'friday',
          'saturday',
          'sunday',
        ]),
        intervals: zod.array(
          zod.object({
            from: zod.string(),
            to: zod.string(),
          }),
        ),
      }),
    ),
    products: zod.array(
      zod
        .object({
          productId: zod.number(),
          variantId: zod.number(),
          description: zod.string().optional(),
          duration: zod.string().or(zod.number()),
          breakTime: zod.string().or(zod.number()),
          noticePeriod: zod.object({
            value: zod.string().or(zod.number()),
            unit: zod.enum(['hours', 'days', 'weeks']),
          }),
          bookingPeriod: zod.object({
            value: zod.string().or(zod.number()),
            unit: zod.enum(['weeks', 'months']),
          }),
        })
        .and(
          zod.object({
            locations: zod.array(
              zod.object({
                location: zod.string(),
                locationType: zod.enum(['origin', 'destination']),
              }),
            ),
          }),
        ),
    ),
  }),
});

/**
 * This endpoint destroy schedule for customer
 * @summary DEL destroy schedule
 */
export const customerScheduleDestroyResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    deletedCount: zod.number(),
    acknowledged: zod.boolean(),
  }),
});

/**
 * This endpoint update schedule slot
 * @summary PUT Update schedule slot
 */
export const customerScheduleSlotUpdateResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    _id: zod.string(),
    name: zod.string(),
    customerId: zod.number(),
    slots: zod.array(
      zod.object({
        day: zod.enum([
          'monday',
          'tuesday',
          'wednesday',
          'thursday',
          'friday',
          'saturday',
          'sunday',
        ]),
        intervals: zod.array(
          zod.object({
            from: zod.string(),
            to: zod.string(),
          }),
        ),
      }),
    ),
    products: zod.array(
      zod
        .object({
          productId: zod.number(),
          variantId: zod.number(),
          description: zod.string().optional(),
          duration: zod.string().or(zod.number()),
          breakTime: zod.string().or(zod.number()),
          noticePeriod: zod.object({
            value: zod.string().or(zod.number()),
            unit: zod.enum(['hours', 'days', 'weeks']),
          }),
          bookingPeriod: zod.object({
            value: zod.string().or(zod.number()),
            unit: zod.enum(['weeks', 'months']),
          }),
        })
        .and(
          zod.object({
            locations: zod.array(
              zod.object({
                location: zod.string(),
                locationType: zod.enum(['origin', 'destination']),
              }),
            ),
          }),
        ),
    ),
  }),
});

/**
 * This endpoint get all professions
 * @summary GET Get all professions
 */
export const metaProfessionsResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(
    zod.object({
      label: zod.string(),
      value: zod.string(),
    }),
  ),
});

/**
 * This endpoint get all specialties
 * @summary GET Get all specialties
 */
export const metaspecialtiesResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(
    zod.object({
      label: zod.string(),
      value: zod.string(),
    }),
  ),
});

/**
 * This endpoint get all origin locations
 * @summary GET Get all origin locations
 */
export const customerLocationGetAllOriginsParams = zod.object({
  customerId: zod.string(),
});

export const customerLocationGetAllOriginsResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(
    zod.object({
      _id: zod.string(),
      locationType: zod.enum(['origin', 'destination']),
      customerId: zod.string(),
      originType: zod.enum(['home', 'commercial']),
      name: zod.string(),
      fullAddress: zod.string(),
      geoLocation: zod.object({
        type: zod.enum(['Point']),
        coordinates: zod.array(zod.number()),
      }),
      distanceForFree: zod.number(),
      distanceHourlyRate: zod.number(),
      fixedRatePerKm: zod.number(),
      minDriveDistance: zod.number().or(zod.string()),
      maxDriveDistance: zod.number().or(zod.string()),
      startFee: zod.number().or(zod.string()).optional(),
    }),
  ),
});

/**
 * This endpoint set new default location for user
 * @summary POST Set new default location for user
 */
export const customerLocationSetDefaultParams = zod.object({
  customerId: zod.string(),
  locationId: zod.string(),
});

export const customerLocationSetDefaultResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    customerId: zod.number(),
    yearsExperience: zod.string(),
    professions: zod.array(zod.string()),
    specialties: zod.array(zod.string()).optional(),
    username: zod.string().optional(),
    aboutMe: zod.string(),
    shortDescription: zod.string(),
    gender: zod.string().optional(),
    social: zod
      .object({
        youtube: zod.string().optional(),
        twitter: zod.string().optional(),
        instagram: zod.string().optional(),
      })
      .optional(),
    images: zod
      .object({
        profile: zod
          .object({
            url: zod.string().url().optional(),
            width: zod.number().optional(),
            height: zod.number().optional(),
          })
          .optional(),
      })
      .optional(),
    speaks: zod.array(zod.string()),
    fullname: zod.string(),
    active: zod.boolean(),
    email: zod.string().email().optional(),
    phone: zod.string().optional(),
  }),
});

/**
 * This endpoint get one location for user
 * @summary GET Get one location from user
 */
export const customerLocationGetParams = zod.object({
  customerId: zod.string(),
  locationId: zod.string(),
});

export const customerLocationGetResponse = zod.object({
  success: zod.boolean(),
  payload: zod
    .object({
      _id: zod.string(),
      locationType: zod.enum(['origin', 'destination']),
      customerId: zod.string(),
      originType: zod.enum(['home', 'commercial']),
      name: zod.string(),
      fullAddress: zod.string(),
      geoLocation: zod.object({
        type: zod.enum(['Point']),
        coordinates: zod.array(zod.number()),
      }),
      distanceForFree: zod.number(),
      distanceHourlyRate: zod.number(),
      fixedRatePerKm: zod.number(),
      minDriveDistance: zod.number().or(zod.string()),
      maxDriveDistance: zod.number().or(zod.string()),
      startFee: zod.number().or(zod.string()).optional(),
    })
    .and(
      zod.object({
        isDefault: zod.boolean(),
      }),
    ),
});

/**
 * This endpoint remove location but does not delete location from db
 * @summary POST Remove location from user
 */
export const customerLocationRemoveParams = zod.object({
  customerId: zod.string(),
  locationId: zod.string(),
});

export const customerLocationRemoveResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    customerId: zod.number(),
    yearsExperience: zod.string(),
    professions: zod.array(zod.string()),
    specialties: zod.array(zod.string()).optional(),
    username: zod.string().optional(),
    aboutMe: zod.string(),
    shortDescription: zod.string(),
    gender: zod.string().optional(),
    social: zod
      .object({
        youtube: zod.string().optional(),
        twitter: zod.string().optional(),
        instagram: zod.string().optional(),
      })
      .optional(),
    images: zod
      .object({
        profile: zod
          .object({
            url: zod.string().url().optional(),
            width: zod.number().optional(),
            height: zod.number().optional(),
          })
          .optional(),
      })
      .optional(),
    speaks: zod.array(zod.string()),
    fullname: zod.string(),
    active: zod.boolean(),
    email: zod.string().email().optional(),
    phone: zod.string().optional(),
  }),
});

/**
 * This endpoint add new location
 * @summary POST Add location to user
 */
export const customerLocationAddParams = zod.object({
  customerId: zod.string(),
  locationId: zod.string(),
});

export const customerLocationAddResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    customerId: zod.number(),
    yearsExperience: zod.string(),
    professions: zod.array(zod.string()),
    specialties: zod.array(zod.string()).optional(),
    username: zod.string().optional(),
    aboutMe: zod.string(),
    shortDescription: zod.string(),
    gender: zod.string().optional(),
    social: zod
      .object({
        youtube: zod.string().optional(),
        twitter: zod.string().optional(),
        instagram: zod.string().optional(),
      })
      .optional(),
    images: zod
      .object({
        profile: zod
          .object({
            url: zod.string().url().optional(),
            width: zod.number().optional(),
            height: zod.number().optional(),
          })
          .optional(),
      })
      .optional(),
    speaks: zod.array(zod.string()),
    fullname: zod.string(),
    active: zod.boolean(),
    email: zod.string().email().optional(),
    phone: zod.string().optional(),
  }),
});

/**
 * This endpoint update existing location
 * @summary PUT Update location
 */
export const customerLocationUpdateParams = zod.object({
  customerId: zod.string(),
  locationId: zod.string(),
});

export const customerLocationUpdateBody = zod.object({
  name: zod.string().optional(),
  fullAddress: zod.string().optional(),
  originType: zod.enum(['home', 'commercial']).optional(),
  distanceForFree: zod.number().or(zod.string()).optional(),
  distanceHourlyRate: zod.number().or(zod.string()).optional(),
  fixedRatePerKm: zod.number().or(zod.string()).optional(),
  minDriveDistance: zod.number().or(zod.string()).optional(),
  maxDriveDistance: zod.number().or(zod.string()).optional(),
  startFee: zod.number().or(zod.string()).optional(),
});

export const customerLocationUpdateResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    _id: zod.string(),
    locationType: zod.enum(['origin', 'destination']),
    customerId: zod.string(),
    originType: zod.enum(['home', 'commercial']),
    name: zod.string(),
    fullAddress: zod.string(),
    geoLocation: zod.object({
      type: zod.enum(['Point']),
      coordinates: zod.array(zod.number()),
    }),
    distanceForFree: zod.number(),
    distanceHourlyRate: zod.number(),
    fixedRatePerKm: zod.number(),
    minDriveDistance: zod.number().or(zod.string()),
    maxDriveDistance: zod.number().or(zod.string()),
    startFee: zod.number().or(zod.string()).optional(),
  }),
});

/**
 * This endpoint creates new location
 * @summary POST Create location origin or destination
 */
export const customerLocationCreateParams = zod.object({
  customerId: zod.string(),
});

export const customerLocationCreateBody = zod.object({
  name: zod.string(),
  fullAddress: zod.string(),
  originType: zod.enum(['home', 'commercial']),
  distanceForFree: zod.number().or(zod.string()),
  distanceHourlyRate: zod.number().or(zod.string()),
  fixedRatePerKm: zod.number().or(zod.string()),
  minDriveDistance: zod.number().or(zod.string()),
  maxDriveDistance: zod.number().or(zod.string()),
  startFee: zod.number().or(zod.string()).optional(),
  locationType: zod.enum(['origin', 'destination']),
});

export const customerLocationCreateResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    _id: zod.string(),
    locationType: zod.enum(['origin', 'destination']),
    customerId: zod.string(),
    originType: zod.enum(['home', 'commercial']),
    name: zod.string(),
    fullAddress: zod.string(),
    geoLocation: zod.object({
      type: zod.enum(['Point']),
      coordinates: zod.array(zod.number()),
    }),
    distanceForFree: zod.number(),
    distanceHourlyRate: zod.number(),
    fixedRatePerKm: zod.number(),
    minDriveDistance: zod.number().or(zod.string()),
    maxDriveDistance: zod.number().or(zod.string()),
    startFee: zod.number().or(zod.string()).optional(),
  }),
});

/**
 * This endpoint get all locations for user
 * @summary GET Get all locations for user
 */
export const customerLocationListParams = zod.object({
  customerId: zod.string(),
});

export const customerLocationListResponse = zod.object({
  success: zod.boolean(),
  payload: zod.array(
    zod
      .object({
        _id: zod.string(),
        locationType: zod.enum(['origin', 'destination']),
        customerId: zod.string(),
        originType: zod.enum(['home', 'commercial']),
        name: zod.string(),
        fullAddress: zod.string(),
        geoLocation: zod.object({
          type: zod.enum(['Point']),
          coordinates: zod.array(zod.number()),
        }),
        distanceForFree: zod.number(),
        distanceHourlyRate: zod.number(),
        fixedRatePerKm: zod.number(),
        minDriveDistance: zod.number().or(zod.string()),
        maxDriveDistance: zod.number().or(zod.string()),
        startFee: zod.number().or(zod.string()).optional(),
      })
      .and(
        zod.object({
          isDefault: zod.boolean(),
        }),
      ),
  ),
});

/**
 * This endpoint get coordinates object
 * @summary GET location coordinates
 */
export const locationGetCoordinatesQueryParams = zod.object({
  fullAddress: zod.string().optional(),
});

export const locationGetCoordinatesResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    longitude: zod.number(),
    latitude: zod.number(),
    fullAddress: zod.string(),
  }),
});

/**
 * This endpoint validate address
 * @summary GET location validate address
 */
export const locationValidateAddressQueryParams = zod.object({
  name: zod.string().optional(),
  fullAddress: zod.string().optional(),
});

export const locationValidateAddressResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    longitude: zod.number(),
    latitude: zod.number(),
    fullAddress: zod.string(),
  }),
});

/**
 * This endpoint gets traval time object
 * @summary GET location travel time
 */
export const locationGetTravelTimeQueryParams = zod.object({
  origin: zod.string().optional(),
  destination: zod.string().optional(),
});

export const locationGetTravelTimeResponse = zod.object({
  success: zod.boolean(),
  payload: zod.object({
    duration: zod.object({
      text: zod.string(),
      value: zod.number(),
    }),
    distance: zod.object({
      text: zod.string(),
      value: zod.number(),
    }),
  }),
});

/**
 * @summary POST create shipping
 */
export const shippingCreateBody = zod.object({
  customerId: zod.number().or(zod.string()).optional(),
  locationId: zod.string(),
  destination: zod.object({
    name: zod.string(),
    fullAddress: zod.string(),
  }),
});

export const shippingCreateResponse = zod.object({
  success: zod.boolean(),
  payload: zod
    .object({
      duration: zod.object({
        text: zod.string(),
        value: zod.number(),
      }),
      distance: zod.object({
        text: zod.string(),
        value: zod.number(),
      }),
    })
    .and(
      zod.object({
        _id: zod.string().optional(),
        location: zod.string().optional(),
        origin: zod
          .object({
            name: zod.string(),
            fullAddress: zod.string(),
            originType: zod.enum(['home', 'commercial']),
            distanceForFree: zod.number().or(zod.string()),
            distanceHourlyRate: zod.number().or(zod.string()),
            fixedRatePerKm: zod.number().or(zod.string()),
            minDriveDistance: zod.number().or(zod.string()),
            maxDriveDistance: zod.number().or(zod.string()),
            startFee: zod.number().or(zod.string()).optional(),
            locationType: zod.enum(['origin', 'destination']),
          })
          .optional(),
        destination: zod
          .object({
            name: zod.string(),
            fullAddress: zod.string(),
          })
          .optional(),
        cost: zod.object({
          currency: zod.string(),
          value: zod.number(),
        }),
      }),
    ),
});

/**
 * @summary POST get shipping calculate
 */
export const shippingCalculateBody = zod.object({
  customerId: zod.number().or(zod.string()).optional(),
  locationId: zod.string(),
  destination: zod.object({
    name: zod.string(),
    fullAddress: zod.string(),
  }),
});

export const shippingCalculateResponse = zod.object({
  success: zod.boolean(),
  payload: zod
    .object({
      duration: zod.object({
        text: zod.string(),
        value: zod.number(),
      }),
      distance: zod.object({
        text: zod.string(),
        value: zod.number(),
      }),
    })
    .and(
      zod.object({
        cost: zod.object({
          currency: zod.string(),
          value: zod.number(),
        }),
      }),
    ),
});
