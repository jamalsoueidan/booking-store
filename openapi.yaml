openapi: 3.0.2
info:
  version: 1.0.0
  title: Booking Shopify Api
  license:
    name: MIT
    url: 'http://'
  contact:
    name: jamal Soueidan
    email: jamal@soueidan.com
    url: 'https://github.com/jamalsoueidan'
  x-tagGroups:
    - name: all api endpoints
      tags:
        - Schedule
servers:
  - url: 'https://booking-shopify-api.azurewebsites.net/api'
components:
  responses:
    BadResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
  schemas:
    NumberOrString:
      oneOf:
        - type: number
        - type: string
    Errors:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: array
                items:
                  type: string
              message:
                type: string
              code:
                type: string
              expected:
                type: string
              received:
                type: number
            required:
              - path
              - message
              - code
      required:
        - success
        - errors
    MetaItem:
      type: object
      properties:
        label:
          type: string
          example: Makeupartist
        value:
          type: string
          example: makeup_artist
      required:
        - label
        - value
    CustomerProductBase:
      type: object
      properties:
        productId:
          type: number
        variantId:
          type: number
        description:
          type: string
        duration:
          type: number
        breakTime:
          type: number
        noticePeriod:
          $ref: '#/components/schemas/CustomerProductNoticePeriod'
        bookingPeriod:
          $ref: '#/components/schemas/CustomerProductBookingPeriod'
      required:
        - variantId
        - productId
        - duration
        - breakTime
        - noticePeriod
        - bookingPeriod
    CustomerProduct:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerProductBase'
        - type: object
          properties:
            locations:
              $ref: '#/components/schemas/CustomerProductLocations'
          required:
            - locations
    CustomerProductBookingPeriod:
      type: object
      properties:
        value:
          type: number
        unit:
          $ref: '#/components/schemas/CustomerProductBookingUnit'
          default: months
      required:
        - value
        - unit
    CustomerProductBookingUnit:
      type: string
      enum:
        - weeks
        - months
    CustomerProductNoticePeriod:
      type: object
      properties:
        value:
          type: number
        unit:
          $ref: '#/components/schemas/CustomerProductNoticeUnit'
          default: hours
      required:
        - value
        - unit
    CustomerProductNoticeUnit:
      type: string
      enum:
        - hours
        - days
        - weeks
    CustomerProductLocations:
      type: array
      items:
        type: object
        properties:
          location:
            type: string
          locationType:
            type: string
            enum:
              - origin
              - destination
        required:
          - location
          - locationType
    CustomerProductUpsertResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerProductUpsertBody:
      type: object
      properties:
        scheduleId:
          type: string
        variantId:
          type: number
        duration:
          type: number
        breakTime:
          type: number
        noticePeriod:
          $ref: '#/components/schemas/CustomerProductNoticePeriod'
        bookingPeriod:
          $ref: '#/components/schemas/CustomerProductBookingPeriod'
        locations:
          $ref: '#/components/schemas/CustomerProductLocations'
      required:
        - scheduleId
        - variantId
        - duration
        - breakTime
        - noticePeriod
        - bookingPeriod
        - locations
    CustomerProductDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            matchedCount:
              type: number
            modifiedCount:
              type: number
            upsertedCount:
              type: number
          required:
            - matchedCount
            - modifiedCount
            - upsertedCount
      required:
        - success
        - payload
    CustomerProductGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerScheduleDestroy:
      type: object
      properties:
        deletedCount:
          type: number
        acknowledged:
          type: boolean
      required:
        - deletedCount
        - acknowledged
    CustomerScheduleSlotDay:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    CustomerScheduleSlotInterval:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
      required:
        - from
        - to
    CustomerScheduleSlot:
      type: object
      properties:
        day:
          $ref: '#/components/schemas/CustomerScheduleSlotDay'
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/CustomerScheduleSlotInterval'
      required:
        - day
        - intervals
    CustomerSchedule:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        customerId:
          type: number
        slots:
          type: array
          items:
            $ref: '#/components/schemas/CustomerScheduleSlot'
        products:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProduct'
      required:
        - _id
        - name
        - customerId
        - slots
        - products
    CustomerScheduleCreateBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    CustomerScheduleCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerScheduleDestroy'
      required:
        - success
        - payload
    CustomerScheduleListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleUpdateBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    CustomerScheduleSlotsUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleSlotsUpdateBody:
      type: object
      properties:
        slots:
          type: array
          items:
            $ref: '#/components/schemas/CustomerScheduleSlot'
      required:
        - slots
    CustomerBooking:
      type: object
      properties:
        orderId:
          type: integer
        buyer:
          type: object
          properties:
            id:
              type: integer
            fullName:
              type: string
            phone:
              type: string
            email:
              type: string
          required:
            - id
            - fullName
            - phone
            - email
        lineItems:
          type: array
          items:
            type: object
            properties:
              customerId:
                type: integer
              from:
                type: string
                format: date-time
              to:
                type: string
                format: date-time
              productId:
                type: integer
              variantId:
                type: integer
              lineItemId:
                type: integer
              title:
                type: string
              priceSet:
                type: object
                properties:
                  amount:
                    type: string
                  currency_code:
                    type: string
                required:
                  - amount
                  - currency_code
              totalDiscountSet:
                type: object
                properties:
                  amount:
                    type: string
                  currency_code:
                    type: string
                required:
                  - amount
                  - currency_code
              status:
                type: string
                enum:
                  - fulfilled
                  - onhold
                  - unfulfilled
                  - cancelled
                  - refunded
            required:
              - customerId
              - from
              - to
              - productId
              - variantId
              - lineItemId
              - title
              - priceSet
              - totalDiscountSet
              - status
        cancelReason:
          type: string
        cancelledAt:
          type: string
          format: date-time
      required:
        - orderId
        - buyer
        - lineItems
        - cancelReason
        - cancelledAt
    CustomerBookingGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerBooking'
      required:
        - success
        - payload
    CustomerBookingListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerBooking'
      required:
        - success
        - payload
    CustomerAvailabilityBody:
      type: object
      properties:
        startDate:
          type: string
        productIds:
          type: array
          items:
            type: string
        shippingId:
          type: string
      required:
        - startDate
        - productIds
    CustomerAvailability:
      type: object
      properties:
        date:
          type: string
        customer:
          type: object
          properties:
            customerId:
              type: string
            fullname:
              type: string
          required:
            - customerId
            - fullname
        shipping:
          type: object
          properties:
            _id:
              type: string
            location:
              type: string
            origin:
              type: object
              properties:
                customerId:
                  type: string
                  format: gid
                name:
                  type: string
                fullAddress:
                  type: string
                distanceForFree:
                  type: number
                distanceHourlyRate:
                  type: number
                fixedRatePerKm:
                  type: number
                startFee:
                  type: number
            destination:
              type: object
              properties:
                name:
                  type: string
                fullAddress:
                  type: string
            duration:
              type: object
              properties:
                text:
                  type: string
                value:
                  type: number
            distance:
              type: object
              properties:
                text:
                  type: string
                value:
                  type: number
            cost:
              type: number
          required:
            - _id
            - origin
            - destination
            - duration
            - distance
            - cost
        slots:
          type: array
          items:
            type: object
            properties:
              from:
                type: string
              to:
                type: string
              products:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: number
                    variantId:
                      type: number
                    from:
                      type: string
                    to:
                      type: string
                    breakTime:
                      type: number
                    duration:
                      type: number
                  required:
                    - productId
                    - variantId
                    - from
                    - to
                    - breakTime
                    - duration
            required:
              - from
              - to
              - products
      required:
        - date
        - customer
        - slots
    CustomerAvailabilityGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerAvailability'
      required:
        - success
        - payload
    CustomerProductList:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerProduct'
        - type: object
          properties:
            scheduleId:
              type: string
            scheduleName:
              type: string
          required:
            - scheduleId
            - scheduleName
    CustomerIsBusinessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            isBusiness:
              type: boolean
      required:
        - success
        - payload
    CustomerStatus:
      type: object
      properties:
        profile:
          type: boolean
        locations:
          type: boolean
        schedules:
          type: boolean
        services:
          type: boolean
        profileImage:
          type: boolean
      required:
        - profile
        - locations
        - schedules
        - services
        - profileImage
    CustomerStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerStatus'
      required:
        - success
        - payload
    CustomerGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerUpdateBody:
      type: object
      properties:
        customerId:
          type: number
        yearsExperience:
          type: string
          format: number
        professions:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        specialties:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        username:
          type: string
        aboutMe:
          type: string
        shortDescription:
          type: string
        gender:
          type: string
        social:
          type: object
          properties:
            youtube:
              type: string
            twitter:
              type: string
            instagram:
              type: string
        images:
          type: object
          properties:
            profile:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                width:
                  type: integer
                height:
                  type: integer
        speaks:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        fullname:
          type: string
        active:
          type: boolean
        email:
          type: string
          format: email
        phone:
          type: string
    CustomerUpsertResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerUpsertBody:
      type: object
      properties:
        professions:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        specialties:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        username:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        aboutMe:
          type: string
        shortDescription:
          type: string
        social:
          type: object
          properties:
            youtube:
              type: string
            twitter:
              type: string
            instagram:
              type: string
        speaks:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
      required:
        - professions
        - specialties
        - username
        - aboutMe
        - shortDescription
    CustomerProductListIdsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            type: number
      required:
        - success
        - payload
    CustomerProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerLocation:
      type: object
      properties:
        _id:
          type: string
        locationType:
          type: string
          enum:
            - origin
            - destination
        customerId:
          type: string
          format: gid
        originType:
          type: string
          enum:
            - home
            - commercial
        name:
          type: string
        fullAddress:
          type: string
        geoLocation:
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - Point
            coordinates:
              type: array
              items:
                type: number
        distanceForFree:
          type: number
        distanceHourlyRate:
          type: number
        fixedRatePerKm:
          type: number
        minDriveDistance:
          type: number
        maxDriveDistance:
          type: number
        startFee:
          type: number
      required:
        - _id
        - locationType
        - originType
        - customerId
        - name
        - fullAddress
        - geoLocation
        - distanceForFree
        - distanceHourlyRate
        - fixedRatePerKm
        - minDriveDistance
        - maxDriveDistance
        - startFee
    CustomerLocationIsDefault:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerLocation'
        - type: object
          properties:
            isDefault:
              type: boolean
          required:
            - isDefault
    CustomerLocationGetAllOriginsRepsonse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerLocation'
      required:
        - success
        - payload
    CustomerLocationCreateBody:
      type: object
      properties:
        name:
          type: string
        fullAddress:
          type: string
        originType:
          type: string
          enum:
            - home
            - commercial
        distanceForFree:
          type: number
        distanceHourlyRate:
          type: number
        fixedRatePerKm:
          type: number
        minDriveDistance:
          type: number
        maxDriveDistance:
          type: number
        startFee:
          type: number
        locationType:
          type: string
          enum:
            - origin
            - destination
      required:
        - name
        - fullAddress
        - originType
        - distanceForFree
        - distanceHourlyRate
        - fixedRatePerKm
        - minDriveDistance
        - maxDriveDistance
        - startFee
        - locationType
    CustomerLocationCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerLocation'
      required:
        - success
        - payload
    CustomerLocationListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerLocationIsDefault'
      required:
        - success
        - payload
    CustomerLocationGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerLocationIsDefault'
      required:
        - success
        - payload
    CustomerLocationUpdateBody:
      type: object
      properties:
        name:
          type: string
        fullAddress:
          type: string
        originType:
          type: string
          enum:
            - home
            - commercial
        distanceForFree:
          type: number
        distanceHourlyRate:
          type: number
        fixedRatePerKm:
          type: number
        minDriveDistance:
          type: number
        maxDriveDistance:
          type: number
        startFee:
          type: number
      required:
        - name
        - fullAddress
        - originType
        - distanceForFree
        - distanceHourlyRate
        - fixedRatePerKm
        - minDriveDistance
        - maxDriveDistance
        - startFee
    CustomerLocationUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerLocation'
      required:
        - success
        - payload
    CustomerLocationAddResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerLocationRemoveResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerLocationSetDefaultResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    User:
      type: object
      properties:
        customerId:
          type: number
        yearsExperience:
          type: string
          format: number
        professions:
          type: array
          items:
            type: string
        specialties:
          type: array
          items:
            type: string
        username:
          type: string
        aboutMe:
          type: string
        shortDescription:
          type: string
        gender:
          type: string
        social:
          type: object
          properties:
            youtube:
              type: string
            twitter:
              type: string
            instagram:
              type: string
        images:
          type: object
          properties:
            profile:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                width:
                  type: integer
                height:
                  type: integer
        speaks:
          type: array
          items:
            type: string
        fullname:
          type: string
        active:
          type: boolean
        email:
          type: string
          format: email
        phone:
          type: string
      required:
        - customerId
        - yearsExperience
        - professions
        - fullname
        - avatar
        - active
        - locations
        - speaks
        - socialUrls
        - shortDescription
        - aboutMe
    UserSchedules:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            schedules:
              type: array
              items:
                $ref: '#/components/schemas/UserSchedule'
          required:
            - schedules
    UserSchedule:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        customerId:
          type: number
        slots:
          type: array
          items:
            $ref: '#/components/schemas/CustomerScheduleSlot'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/CustomerLocation'
      required:
        - _id
        - name
        - customerId
        - slots
        - locations
    UserScheduleProduct:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerProductBase'
        - type: object
          properties:
            locations:
              type: array
              items:
                $ref: '#/components/schemas/CustomerLocation'
          required:
            - locations
    UserScheduleGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          allOf:
            - $ref: '#/components/schemas/UserSchedule'
            - type: object
              properties:
                products:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserScheduleProduct'
              required:
                - products
      required:
        - success
        - payload
    UserGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/UserSchedules'
      required:
        - success
        - payload
    UsersListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            nextCursor:
              type: string
            results:
              type: array
              items:
                $ref: '#/components/schemas/User'
          required:
            - results
      required:
        - success
        - payload
    UsersProfessionsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          additionalProperties:
            type: number
      required:
        - success
        - payload
    LocationCoordinates:
      type: object
      properties:
        longitude:
          type: number
        latitude:
          type: number
        fullAddress:
          type: string
      required:
        - longitude
        - latitude
        - fullAddress
    LocationTravelTime:
      type: object
      properties:
        duration:
          type: object
          properties:
            text:
              type: string
            value:
              type: integer
          required:
            - text
            - value
        distance:
          type: object
          properties:
            text:
              type: string
            value:
              type: integer
          required:
            - text
            - value
      required:
        - duration
        - distance
    LocationGetCoordinatesResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/LocationCoordinates'
      required:
        - success
        - payload
    LocationGetTravelTimeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/LocationTravelTime'
      required:
        - success
        - payload
    LocationValidateAddressResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/LocationCoordinates'
      required:
        - success
        - payload
    ShippingBody:
      type: object
      properties:
        customerId:
          $ref: '#/components/schemas/NumberOrString'
        locationId:
          type: string
        destination:
          type: object
          properties:
            name:
              type: string
            fullAddress:
              type: string
          required:
            - name
            - fullAddress
      required:
        - locationId
        - destination
    ShippingCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          allOf:
            - $ref: '#/components/schemas/LocationTravelTime'
            - type: object
              properties:
                _id:
                  type: string
                location:
                  type: string
                origin:
                  $ref: '#/components/schemas/CustomerLocationCreateBody'
                destination:
                  type: object
                  properties:
                    name:
                      type: string
                    fullAddress:
                      type: string
                  required:
                    - name
                    - fullAddress
                cost:
                  type: object
                  properties:
                    currency:
                      type: string
                    value:
                      type: integer
                  required:
                    - currency
                    - value
              required:
                - cost
      required:
        - success
        - payload
    ShippingCalculateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          allOf:
            - $ref: '#/components/schemas/LocationTravelTime'
            - type: object
              properties:
                cost:
                  type: object
                  properties:
                    currency:
                      type: string
                    value:
                      type: integer
                  required:
                    - currency
                    - value
              required:
                - cost
      required:
        - success
        - payload
paths:
  '/user/{username}':
    parameters:
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      operationId: userGet
      summary: GET Get user
      description: This endpoint gets user object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/user/{username}/schedule/{scheduleId}/location/{locationId}':
    get:
      parameters:
        - name: username
          in: path
          description: username
          required: true
          schema:
            type: string
        - name: scheduleId
          in: path
          description: schedule Id
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          description: location id
          required: true
          schema:
            type: string
      tags:
        - UserSchedule
      operationId: userScheduleGet
      summary: GET Get user schedule
      description: This endpoint gets user schedule object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserScheduleGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /users/professions:
    get:
      tags:
        - User
      operationId: usersProfessions
      summary: GET Get all users professions with total count
      description: This endpoint get all users
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersProfessionsResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /users:
    parameters:
      - name: nextCursor
        in: query
        description: nextCursor
        schema:
          type: string
      - name: limit
        in: query
        description: limit items (default 10)
        schema:
          type: string
      - name: profession
        in: query
        description: profession like makeup_artist
        schema:
          type: string
      - name: sortOrder
        in: query
        description: asc or desc
        schema:
          type: string
    get:
      tags:
        - User
      operationId: usersList
      summary: GET Get all users
      description: This endpoint get all users
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}':
    put:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerUpsert
      summary: PUT Create or Update user (restricted fields)
      description: This endpoint creates new or updates user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpsertBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUpsertResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerGet
      summary: GET Get customer
      description: This endpoint gets customer object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/status':
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerStatus
      summary: GET Get customer status
      description: This endpoint gets customer status
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatusResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/update':
    put:
      parameters:
        - name: customerId
          in: path
          description: must be customerId
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerUpdate
      summary: PUT Create or Update user (all fields allowed)
      description: This endpoint creates new or updates user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/isBusiness':
    get:
      parameters:
        - name: customerId
          in: path
          description: CustomerId from shopify
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerIsBusiness
      summary: GET Get customer is business
      description: This endpoint return if customer is business or not
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerIsBusinessResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/products':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerProduct
      operationId: customerProductsList
      summary: GET Get products for customer
      description: This endpoint get products for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/products/ids':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerProduct
      operationId: customerProductsListIds
      summary: GET Get product ids for customer
      description: This endpoint get product ids for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductListIdsResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/availability/{locationId}/get':
    parameters:
      - name: customerId
        in: path
        description: This field for customerId
        required: true
        schema:
          type: string
      - name: locationId
        in: path
        description: This field for locationId
        required: true
        schema:
          type: string
    post:
      tags:
        - CustomerAvailability
      operationId: customerAvailabilityGet
      summary: POST get availabilty for customer
      description: This availabilty for customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerAvailabilityBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAvailabilityGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/product/{productId}':
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
      - name: productId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerProduct
      operationId: customerProductGet
      summary: GET Get product that exist in one of the schedules for customer
      description: This endpoint get product for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    put:
      tags:
        - CustomerProduct
      operationId: customerProductUpsert
      summary: PUT Upsert product to schedule
      description: This endpoint update product that exist in schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerProductUpsertBody'
      responses:
        '200':
          description: Response with schedule product payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductUpsertResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      tags:
        - CustomerProduct
      operationId: customerProductDestroy
      summary: DEL destroy product
      description: This endpoint remove product from schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/booking/{orderId}':
    get:
      parameters:
        - name: customerId
          in: path
          description: customerId for the customer
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          description: orderId for the order
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: date for the lineItem (2014-12-12)
          required: true
          schema:
            type: string
      tags:
        - CustomerBooking
      operationId: customerBookingGet
      summary: GET Get booking
      description: This endpoint gets booking object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerBookingGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/bookings':
    get:
      parameters:
        - name: customerId
          in: path
          description: customerId for the customer
          required: true
          schema:
            type: string
        - name: mode
          in: query
          description: 'either "upcoming", "completed"'
          required: true
          schema:
            type: string
            enum:
              - completed
              - upcoming
      tags:
        - CustomerBooking
      operationId: customerBookingsList
      summary: GET Get all bookings for customer
      description: This endpoint get all bookings
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerBookingListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/schedule':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
    post:
      tags:
        - CustomerSchedule
      operationId: customerScheduleCreate
      summary: POST Create schedule
      description: This endpoint create new schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerScheduleCreateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/schedules':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerSchedule
      operationId: customerScheduleList
      summary: GET Get all schedule for customer
      description: This endpoint get all schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerSchedule
      operationId: customerScheduleGet
      summary: GET Get schedule for customer
      description: This endpoint get schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    put:
      tags:
        - CustomerSchedule
      operationId: customerScheduleUpdate
      summary: PUT Update schedule
      description: This endpoint update schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerScheduleUpdateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      tags:
        - CustomerSchedule
      operationId: customerScheduleDestroy
      summary: DEL destroy schedule
      description: This endpoint destroy schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}/slots':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
    put:
      tags:
        - CustomerSchedule
      operationId: customerScheduleSlotUpdate
      summary: PUT Update schedule slot
      description: This endpoint update schedule slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerScheduleSlotsUpdateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleSlotsUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /meta/professions:
    get:
      tags:
        - Meta
      operationId: metaProfessions
      summary: GET Get all professions
      description: This endpoint get all professions
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/MetaItem'
                required:
                  - success
                  - payload
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /meta/specialties:
    get:
      tags:
        - Meta
      operationId: metaspecialties
      summary: GET Get all specialties
      description: This endpoint get all specialties
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/MetaItem'
                required:
                  - success
                  - payload
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/locations/get-all-origins':
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationGetAllOrigins
      summary: GET Get all origin locations
      description: This endpoint get all origin locations
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationGetAllOriginsRepsonse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/location/{locationId}/setDefault':
    put:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationSetDefault
      summary: POST Set new default location for user
      description: This endpoint set new default location for user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationSetDefaultResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/location/{locationId}':
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationGet
      summary: GET Get one location from user
      description: This endpoint get one location for user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationRemove
      summary: POST Remove location from user
      description: This endpoint remove location but does not delete location from db
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationRemoveResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    post:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationAdd
      summary: POST Add location to user
      description: This endpoint add new location
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationAddResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    put:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationUpdate
      summary: PUT Update location
      description: This endpoint update existing location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLocationUpdateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/locations':
    post:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationCreate
      summary: POST Create location origin or destination
      description: This endpoint creates new location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLocationCreateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationList
      summary: GET Get all locations for user
      description: This endpoint get all locations for user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /location/get-coordinates:
    get:
      parameters:
        - name: fullAddress
          in: query
          schema:
            type: string
      tags:
        - Location
      operationId: locationGetCoordinates
      summary: GET location coordinates
      description: This endpoint get coordinates object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGetCoordinatesResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /location/validate-address:
    get:
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: fullAddress
          in: query
          schema:
            type: string
      tags:
        - Location
      operationId: locationValidateAddress
      summary: GET location validate address
      description: This endpoint validate address
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationValidateAddressResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /location/get-travel-time:
    get:
      parameters:
        - name: origin
          in: query
          schema:
            type: string
        - name: destination
          in: query
          schema:
            type: string
      tags:
        - Location
      operationId: locationGetTravelTime
      summary: GET location travel time
      description: This endpoint gets traval time object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGetTravelTimeResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /shipping/create:
    post:
      tags:
        - ShippingCreate
      operationId: shippingCreate
      summary: POST create shipping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  /shipping/calculate:
    post:
      tags:
        - ShippingCalculate
      operationId: shippingCalculate
      summary: POST get shipping calculate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingCalculateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
