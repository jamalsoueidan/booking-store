openapi: 3.0.2
info:
  version: 1.0.0
  title: Booking Shopify Api
  license:
    name: MIT
    url: 'http://'
  contact:
    name: jamal Soueidan
    email: jamal@soueidan.com
    url: 'https://github.com/jamalsoueidan'
  x-tagGroups:
    - name: all api endpoints
      tags:
        - Schedule
servers:
  - url: 'https://booking-shopify-api.azurewebsites.net/api'
components:
  responses:
    BadResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
  schemas:
    Errors:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: array
                items:
                  type: string
              message:
                type: string
              code:
                type: string
              expected:
                type: string
              received:
                type: number
            required:
              - path
              - message
              - code
      required:
        - success
        - errors
    MetaItem:
      type: object
      properties:
        label:
          type: string
          example: Makeupartist
        value:
          type: string
          example: makeup_artist
      required:
        - label
        - value
    CustomerUploadResourceURLResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            resourceUrl:
              type: string
            url:
              type: string
            parameters:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  value:
                    type: string
                required:
                  - name
                  - value
          required:
            - resourceURL
            - url
            - parameters
      required:
        - success
        - payload
    CustomerProductBase:
      type: object
      properties:
        productHandle:
          type: string
        productId:
          type: number
        variantId:
          type: number
        description:
          type: string
        selectedOptions:
          type: object
          properties:
            name:
              type: string
            value:
              type: string
          required:
            - name
            - value
        price:
          type: object
          properties:
            amount:
              type: string
            currencyCode:
              type: string
          required:
            - amount
            - currencyCode
        compareAtPrice:
          type: object
          properties:
            amount:
              type: string
            currencyCode:
              type: string
          required:
            - amount
            - currencyCode
        duration:
          type: number
        breakTime:
          type: number
        noticePeriod:
          $ref: '#/components/schemas/CustomerProductNoticePeriod'
        bookingPeriod:
          $ref: '#/components/schemas/CustomerProductBookingPeriod'
      required:
        - variantId
        - productId
        - duration
        - price
        - selectedOptions
        - breakTime
        - noticePeriod
        - bookingPeriod
    CustomerProduct:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerProductBase'
        - type: object
          properties:
            locations:
              $ref: '#/components/schemas/CustomerProductLocations'
          required:
            - locations
    CustomerProductBookingPeriod:
      type: object
      properties:
        value:
          type: number
        unit:
          $ref: '#/components/schemas/CustomerProductBookingUnit'
          default: months
      required:
        - value
        - unit
    CustomerProductBookingUnit:
      type: string
      enum:
        - weeks
        - months
    CustomerProductNoticePeriod:
      type: object
      properties:
        value:
          type: number
        unit:
          $ref: '#/components/schemas/CustomerProductNoticeUnit'
          default: hours
      required:
        - value
        - unit
    CustomerProductNoticeUnit:
      type: string
      enum:
        - hours
        - days
        - weeks
    CustomerProductLocations:
      type: array
      items:
        type: object
        properties:
          location:
            type: string
          locationType:
            type: string
            enum:
              - origin
              - destination
        required:
          - location
          - locationType
    CustomerProductUpsertResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerProductUpsertBody:
      type: object
      properties:
        scheduleId:
          type: string
        productHandle:
          type: string
        variantId:
          type: number
        selectedOptions:
          type: object
          properties:
            name:
              type: string
            value:
              type: string
          required:
            - name
            - value
        price:
          type: object
          properties:
            amount:
              type: string
            currencyCode:
              type: string
          required:
            - amount
            - currencyCode
        compareAtPrice:
          type: object
          properties:
            amount:
              type: string
            currencyCode:
              type: string
          required:
            - amount
            - currencyCode
        duration:
          type: number
        breakTime:
          type: number
        noticePeriod:
          $ref: '#/components/schemas/CustomerProductNoticePeriod'
        bookingPeriod:
          $ref: '#/components/schemas/CustomerProductBookingPeriod'
        locations:
          $ref: '#/components/schemas/CustomerProductLocations'
      required:
        - scheduleId
        - productHandle
        - variantId
        - price
        - duration
        - selectedOptions
        - breakTime
        - noticePeriod
        - bookingPeriod
        - locations
    CustomerProductDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            matchedCount:
              type: number
            modifiedCount:
              type: number
            upsertedCount:
              type: number
          required:
            - matchedCount
            - modifiedCount
            - upsertedCount
      required:
        - success
        - payload
    CustomerProductGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerScheduleDestroy:
      type: object
      properties:
        deletedCount:
          type: number
        acknowledged:
          type: boolean
      required:
        - deletedCount
        - acknowledged
    CustomerScheduleSlotDay:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    CustomerScheduleSlotInterval:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
      required:
        - from
        - to
    CustomerScheduleSlot:
      type: object
      properties:
        day:
          $ref: '#/components/schemas/CustomerScheduleSlotDay'
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/CustomerScheduleSlotInterval'
      required:
        - day
        - intervals
    CustomerSchedule:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        customerId:
          type: number
        slots:
          type: array
          items:
            $ref: '#/components/schemas/CustomerScheduleSlot'
        products:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProduct'
      required:
        - _id
        - name
        - customerId
        - slots
        - products
    CustomerScheduleCreateBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    CustomerScheduleCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerScheduleDestroy'
      required:
        - success
        - payload
    CustomerScheduleListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleUpdateBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    CustomerScheduleSlotsUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerSchedule'
      required:
        - success
        - payload
    CustomerScheduleSlotsUpdateBody:
      type: object
      properties:
        slots:
          type: array
          items:
            $ref: '#/components/schemas/CustomerScheduleSlot'
      required:
        - slots
    CustomerBooking:
      type: object
      properties:
        orderId:
          type: integer
        buyer:
          type: object
          properties:
            id:
              type: integer
            fullName:
              type: string
            phone:
              type: string
            email:
              type: string
          required:
            - id
            - fullName
            - phone
            - email
        lineItems:
          type: array
          items:
            type: object
            properties:
              customerId:
                type: integer
              from:
                type: string
                format: date-time
              to:
                type: string
                format: date-time
              productId:
                type: integer
              variantId:
                type: integer
              lineItemId:
                type: integer
              title:
                type: string
              priceSet:
                type: object
                properties:
                  amount:
                    type: string
                  currency_code:
                    type: string
                required:
                  - amount
                  - currency_code
              totalDiscountSet:
                type: object
                properties:
                  amount:
                    type: string
                  currency_code:
                    type: string
                required:
                  - amount
                  - currency_code
              status:
                type: string
                enum:
                  - fulfilled
                  - onhold
                  - unfulfilled
                  - cancelled
                  - refunded
            required:
              - customerId
              - from
              - to
              - productId
              - variantId
              - lineItemId
              - title
              - priceSet
              - totalDiscountSet
              - status
        cancelReason:
          type: string
        cancelledAt:
          type: string
          format: date-time
      required:
        - orderId
        - buyer
        - lineItems
        - cancelReason
        - cancelledAt
    CustomerBookingGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerBooking'
      required:
        - success
        - payload
    CustomerBookingListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerBooking'
      required:
        - success
        - payload
    CustomerOrder:
      type: object
      properties:
        id:
          type: number
        order_number:
          type: number
        admin_graphql_api_id:
          type: string
        buyer_accepts_marketing:
          type: boolean
        cancel_reason:
          type: string
          nullable: true
        cancelled_at:
          type: string
        client_details:
          $ref: '#/components/schemas/CustomerOrderClient'
        closed_at:
          type: string
          nullable: true
        confirmed:
          type: boolean
        contact_email:
          type: string
          nullable: true
        created_at:
          type: string
        currency:
          type: string
        current_subtotal_price:
          type: string
        current_subtotal_price_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
        current_total_additional_fees_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
          nullable: true
        current_total_discounts:
          type: string
        current_total_discounts_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
        current_total_duties_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
          nullable: true
        current_total_price:
          type: string
        current_total_price_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
        current_total_tax:
          type: string
        current_total_tax_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
        customer:
          $ref: '#/components/schemas/CustomerOrderCustomer'
        fulfillments:
          type: array
          items:
            $ref: '#/components/schemas/CustomerOrderFulfillment'
        line_items:
          $ref: '#/components/schemas/CustomerOrderLineItem'
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/CustomerOrderRefund'
        shipping_address:
          $ref: '#/components/schemas/CustomerOrderAddress'
          nullable: true
        shipping_lines:
          type: array
          items:
            $ref: '#/components/schemas/CustomerOrderShipping'
        start:
          type: string
        end:
          type: string
        title:
          type: string
      required:
        - id
        - admin_graphql_api_id
        - buyer_accepts_marketing
        - confirmed
        - created_at
        - currency
        - customer
        - current_subtotal_price
        - current_subtotal_price_set
        - current_total_discounts
        - current_total_discounts_set
        - current_total_price
        - current_total_price_set
        - current_total_tax
        - current_total_tax_set
        - fulfillments
        - line_items
        - refunds
        - shipping_lines
        - start
        - end
        - title
        - order_number
    CustomerOrderMoney:
      type: object
      properties:
        shop_money:
          type: object
          properties:
            amount:
              type: string
            currency_code:
              type: string
          required:
            - amount
            - currency_code
        presentment_money:
          type: object
          properties:
            amount:
              type: string
            currency_code:
              type: string
          required:
            - amount
            - currency_code
      required:
        - shop_money
        - presentment_money
    CustomerOrderAddress:
      type: object
      properties:
        customer_id:
          type: number
        first_name:
          type: string
        address1:
          type: string
        phone:
          type: string
        city:
          type: string
        zip:
          type: string
        province:
          type: string
          nullable: true
        country:
          type: string
        last_name:
          type: string
        address2:
          type: string
          nullable: true
        company:
          type: string
          nullable: true
        latitude:
          type: number
          nullable: true
        longitude:
          type: number
          nullable: true
        name:
          type: string
        country_code:
          type: string
        country_name:
          type: string
        province_code:
          type: string
        default:
          type: boolean
      required:
        - first_name
        - last_name
        - name
        - country_code
        - default
    CustomerOrderClient:
      type: object
      properties:
        accept_language:
          type: string
          nullable: true
        browser_height:
          type: number
          nullable: true
        browser_ip:
          type: string
        browser_width:
          type: number
          nullable: true
        session_hash:
          type: string
          nullable: true
        user_agent:
          type: string
          nullable: true
    CustomerOrderDiscount:
      type: object
      properties:
        code:
          type: string
        amount:
          type: string
        type:
          type: string
      required:
        - code
        - amount
        - type
    CustomerOrderSimpleLineItem:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
      required:
        - id
        - name
    CustomerOrderCustomer:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
          nullable: true
        accepts_marketing:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        state:
          type: string
        note:
          type: string
          nullable: true
        verified_email:
          type: boolean
        multipass_identifier:
          type: string
          nullable: true
        tax_exempt:
          type: boolean
        phone:
          type: string
          nullable: true
        email_marketing_consent:
          type: boolean
          nullable: true
        sms_marketing_consent:
          type: object
          properties:
            state:
              type: string
            opt_in_level:
              type: string
            consent_updated_at:
              type: string
            consent_collected_from:
              type: string
          nullable: true
        tags:
          type: string
        currency:
          type: string
        accepts_marketing_updated_at:
          type: string
        marketing_opt_in_level:
          type: string
          nullable: true
        tax_exemptions:
          type: array
          items:
            type: string
        admin_graphql_api_id:
          type: string
        default_address:
          $ref: '#/components/schemas/CustomerOrderAddress'
          nullable: true
      required:
        - id
        - accepts_marketing
        - created_at
        - updated_at
        - first_name
        - last_name
        - state
        - verified_email
        - tax_exempt
        - tags
        - currency
        - admin_graphql_api_id
    CustomerOrderLineItem:
      type: object
      properties:
        id:
          type: number
        admin_graphql_api_id:
          type: string
        fulfillable_quantity:
          type: number
        fulfillment_service:
          type: string
        fulfillment_status:
          type: string
          nullable: true
        gift_card:
          type: boolean
        grams:
          type: number
        name:
          type: string
        price:
          type: string
        price_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
        product_exists:
          type: boolean
        product_id:
          type: number
          nullable: true
        properties:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                oneOf:
                  - type: string
                  - type: number
              kind:
                type: string
            required:
              - name
              - value
              - kind
        quantity:
          type: number
        requires_shipping:
          type: boolean
        sku:
          type: string
          nullable: true
        taxable:
          type: boolean
        title:
          type: string
        total_discount:
          type: string
        total_discount_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
        variant_id:
          type: number
          nullable: true
        variant_inventory_management:
          type: string
          nullable: true
        variant_title:
          type: string
          nullable: true
        vendor:
          type: string
          nullable: true
      required:
        - id
        - admin_graphql_api_id
        - fulfillable_quantity
        - fulfillment_service
        - gift_card
        - grams
        - name
        - price
        - properties
        - price_set
        - product_exists
        - quantity
        - requires_shipping
        - taxable
        - title
        - total_discount
        - total_discount_set
    CustomerOrderRefund:
      type: object
      properties:
        id:
          type: number
        admin_graphql_api_id:
          type: string
        created_at:
          type: string
        note:
          type: string
          nullable: true
        order_id:
          type: number
        processed_at:
          type: string
        restock:
          type: boolean
        total_duties_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
          nullable: true
        user_id:
          type: number
        refund_line_items:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              line_item_id:
                type: number
              location_id:
                type: number
              quantity:
                type: number
              restock_type:
                type: string
              subtotal:
                oneOf:
                  - type: string
                  - type: number
              subtotal_set:
                $ref: '#/components/schemas/CustomerOrderMoney'
              total_tax:
                oneOf:
                  - type: string
                  - type: number
              total_tax_set:
                $ref: '#/components/schemas/CustomerOrderMoney'
              line_item:
                $ref: '#/components/schemas/CustomerOrderSimpleLineItem'
            required:
              - id
              - line_item_id
              - location_id
              - quantity
              - restock_type
              - subtotal
              - subtotal_set
              - line_item
      required:
        - id
        - admin_graphql_api_id
        - created_at
        - order_id
        - processed_at
        - restock
        - user_id
        - refund_line_items
    CustomerOrderShipping:
      type: object
      properties:
        id:
          type: number
        carrier_identifier:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
        discounted_price:
          type: string
        discounted_price_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
        phone:
          type: string
          nullable: true
        price:
          type: string
        price_set:
          $ref: '#/components/schemas/CustomerOrderMoney'
        requested_fulfillment_service_id:
          type: string
          nullable: true
        source:
          type: string
        title:
          type: string
      required:
        - id
        - discounted_price
        - discounted_price_set
        - price
        - price_set
        - source
        - title
    CustomerOrderFulfillment:
      type: object
      properties:
        id:
          type: number
        admin_graphql_api_id:
          type: string
        created_at:
          type: string
        location_id:
          type: number
        name:
          type: string
        order_id:
          type: number
        service:
          type: string
        shipment_status:
          type: string
          nullable: true
        status:
          type: string
        tracking_company:
          type: string
          nullable: true
        tracking_number:
          type: string
          nullable: true
        tracking_numbers:
          type: array
          items:
            type: string
        tracking_url:
          type: string
          nullable: true
        tracking_urls:
          type: array
          items:
            type: string
        updated_at:
          type: string
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/CustomerOrderSimpleLineItem'
      required:
        - id
        - admin_graphql_api_id
        - created_at
        - location_id
        - name
        - order_id
        - service
        - status
        - line_items
    CustomerOrderGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerOrder'
      required:
        - success
        - payload
    CustomerOrderListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerOrder'
      required:
        - success
        - payload
    CustomerProductList:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerProduct'
        - type: object
          properties:
            scheduleId:
              type: string
            scheduleName:
              type: string
          required:
            - scheduleId
            - scheduleName
    CustomerIsBusinessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            isBusiness:
              type: boolean
      required:
        - success
        - payload
    CustomerStatus:
      type: object
      properties:
        profile:
          type: boolean
        locations:
          type: boolean
        schedules:
          type: boolean
        services:
          type: boolean
        profileImage:
          type: boolean
      required:
        - profile
        - locations
        - schedules
        - services
        - profileImage
    CustomerStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerStatus'
      required:
        - success
        - payload
    CustomerGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerCreateBody:
      type: object
      properties:
        customerId:
          type: number
        fullname:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        username:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        yearsExperience:
          type: string
          format: number
        professions:
          type: array
          items:
            type: string
        specialties:
          type: array
          items:
            type: string
        aboutMe:
          type: string
        shortDescription:
          type: string
        gender:
          type: string
        social:
          type: object
          properties:
            youtube:
              type: string
            x:
              type: string
            instagram:
              type: string
            facebook:
              type: string
        speaks:
          type: array
          items:
            type: string
      required:
        - customerId
        - fullname
        - username
        - email
        - phone
        - yearsExperience
        - professions
        - specialties
        - aboutMe
        - shortDescription
        - gender
        - social
        - speaks
    CustomerUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerUpdateBody:
      type: object
      properties:
        fullname:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        yearsExperience:
          type: string
          format: number
        professions:
          type: array
          items:
            type: string
        specialties:
          type: array
          items:
            type: string
        aboutMe:
          type: string
        shortDescription:
          type: string
        gender:
          type: string
        social:
          type: object
          properties:
            youtube:
              type: string
            facebook:
              type: string
            instagram:
              type: string
            x:
              type: string
        speaks:
          type: array
          items:
            type: string
    CustomerProductListIdsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            type: number
      required:
        - success
        - payload
    CustomerProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerLocation:
      type: object
      properties:
        _id:
          type: string
        locationType:
          type: string
          enum:
            - origin
            - destination
        customerId:
          type: string
          format: gid
        originType:
          type: string
          enum:
            - home
            - commercial
        name:
          type: string
        fullAddress:
          type: string
        geoLocation:
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - Point
            coordinates:
              type: array
              items:
                type: number
        distanceForFree:
          type: number
        distanceHourlyRate:
          type: number
        fixedRatePerKm:
          type: number
        minDriveDistance:
          type: number
        maxDriveDistance:
          type: number
        startFee:
          type: number
      required:
        - _id
        - locationType
        - originType
        - customerId
        - name
        - fullAddress
        - geoLocation
        - distanceForFree
        - distanceHourlyRate
        - fixedRatePerKm
        - minDriveDistance
        - maxDriveDistance
        - startFee
    CustomerLocationIsDefault:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerLocation'
        - type: object
          properties:
            isDefault:
              type: boolean
          required:
            - isDefault
    CustomerLocationGetAllOriginsRepsonse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerLocation'
      required:
        - success
        - payload
    CustomerLocationCreateBody:
      type: object
      properties:
        name:
          type: string
        fullAddress:
          type: string
        originType:
          type: string
          enum:
            - home
            - commercial
        distanceForFree:
          type: number
        distanceHourlyRate:
          type: number
        fixedRatePerKm:
          type: number
        minDriveDistance:
          type: number
        maxDriveDistance:
          type: number
        startFee:
          type: number
        locationType:
          type: string
          enum:
            - origin
            - destination
      required:
        - name
        - fullAddress
        - originType
        - distanceForFree
        - distanceHourlyRate
        - fixedRatePerKm
        - minDriveDistance
        - maxDriveDistance
        - startFee
        - locationType
    CustomerLocationCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerLocation'
      required:
        - success
        - payload
    CustomerLocationListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerLocationIsDefault'
      required:
        - success
        - payload
    CustomerLocationGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerLocationIsDefault'
      required:
        - success
        - payload
    CustomerLocationUpdateBody:
      type: object
      properties:
        name:
          type: string
        fullAddress:
          type: string
        originType:
          type: string
          enum:
            - home
            - commercial
        distanceForFree:
          type: number
        distanceHourlyRate:
          type: number
        fixedRatePerKm:
          type: number
        minDriveDistance:
          type: number
        maxDriveDistance:
          type: number
        startFee:
          type: number
      required:
        - name
        - fullAddress
        - originType
        - distanceForFree
        - distanceHourlyRate
        - fixedRatePerKm
        - minDriveDistance
        - maxDriveDistance
        - startFee
    CustomerLocationUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerLocation'
      required:
        - success
        - payload
    CustomerLocationAddResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerLocationRemoveResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    CustomerLocationSetDefaultResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    UserUsernameTakenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            usernameTaken:
              type: boolean
          required:
            - usernameTaken
      required:
        - success
        - payload
    User:
      type: object
      properties:
        customerId:
          type: number
        fullname:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        username:
          type: string
        yearsExperience:
          type: string
          format: number
        professions:
          type: array
          items:
            type: string
        specialties:
          type: array
          items:
            type: string
        aboutMe:
          type: string
        shortDescription:
          type: string
        gender:
          type: string
        social:
          type: object
          properties:
            youtube:
              type: string
            x:
              type: string
            instagram:
              type: string
            facebook:
              type: string
        speaks:
          type: array
          items:
            type: string
        images:
          type: object
          properties:
            profile:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                width:
                  type: integer
                height:
                  type: integer
      required:
        - customerId
        - fullname
        - username
        - email
        - phone
        - yearsExperience
        - professions
        - specialties
        - aboutMe
        - shortDescription
        - gender
        - social
        - speaks
        - images
    UserScheduleWithLocations:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        customerId:
          type: number
        slots:
          type: array
          items:
            $ref: '#/components/schemas/CustomerScheduleSlot'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/CustomerLocation'
      required:
        - _id
        - name
        - customerId
        - slots
        - locations
    UserScheduleProductWithLocations:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerProductBase'
        - type: object
          properties:
            locations:
              type: array
              items:
                $ref: '#/components/schemas/CustomerLocation'
          required:
            - locations
    UserLocationGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerLocation'
      required:
        - success
        - payload
    UserProductsGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    UserProductsListByLocationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductBase'
      required:
        - success
        - payload
    UserProductsGetProductsBody:
      type: object
      properties:
        productHandlers:
          type: array
          items:
            type: string
      required:
        - productHandlers
    UserProductsGetProductsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductBase'
      required:
        - success
        - payload
    UserProductsListByScheduleResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    UserScheduleGetByLocationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          allOf:
            - $ref: '#/components/schemas/UserScheduleWithLocations'
            - type: object
              properties:
                products:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserScheduleProductWithLocations'
              required:
                - products
      required:
        - success
        - payload
    UserScheduleGetByProductIdResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          allOf:
            - $ref: '#/components/schemas/UserScheduleWithLocations'
            - type: object
              properties:
                product:
                  $ref: '#/components/schemas/UserScheduleProductWithLocations'
              required:
                - product
      required:
        - success
        - payload
    UserGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
    UsersListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            nextCursor:
              type: string
            results:
              type: array
              items:
                $ref: '#/components/schemas/User'
          required:
            - results
      required:
        - success
        - payload
    UsersProfessionsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          additionalProperties:
            type: number
      required:
        - success
        - payload
    UserAvailabilitySlot:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              price:
                type: object
                properties:
                  amount:
                    type: string
                  currencyCode:
                    type: string
                required:
                  - amount
                  - currencyCode
              productId:
                type: number
              variantId:
                type: number
              from:
                type: string
              to:
                type: string
              breakTime:
                type: number
              duration:
                type: number
            required:
              - price
              - productId
              - variantId
              - from
              - to
              - breakTime
              - duration
      required:
        - from
        - to
        - products
    UserAvailability:
      type: object
      properties:
        date:
          type: string
        customer:
          type: object
          properties:
            customerId:
              type: string
            fullname:
              type: string
          required:
            - customerId
            - fullname
        shipping:
          $ref: '#/components/schemas/Shipping'
      required:
        - date
        - customer
    UserAvailabilitySingle:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserAvailability'
        - type: object
          properties:
            slot:
              $ref: '#/components/schemas/UserAvailabilitySlot'
          required:
            - slot
    UserAvailabilityGetBody:
      type: object
      properties:
        fromDate:
          type: string
        toDate:
          type: string
        productIds:
          type: array
          items:
            type: string
        shippingId:
          type: string
      required:
        - startDate
        - productIds
        - fromDate
        - toDate
    UserAvailabilityGeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/UserAvailabilitySingle'
      required:
        - success
        - payload
    UserAvailabilityMulti:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserAvailability'
        - type: object
          properties:
            slots:
              type: array
              items:
                $ref: '#/components/schemas/UserAvailabilitySlot'
          required:
            - slots
    UserAvailabilityGenerateBody:
      type: object
      properties:
        fromDate:
          type: string
        productIds:
          type: array
          items:
            type: string
        shippingId:
          type: string
      required:
        - startDate
        - productIds
    UserAvailabilityGenerateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/UserAvailabilityMulti'
      required:
        - success
        - payload
    LocationCoordinates:
      type: object
      properties:
        longitude:
          type: number
        latitude:
          type: number
        fullAddress:
          type: string
      required:
        - longitude
        - latitude
        - fullAddress
    LocationTravelTime:
      type: object
      properties:
        duration:
          type: object
          properties:
            text:
              type: string
            value:
              type: integer
          required:
            - text
            - value
        distance:
          type: object
          properties:
            text:
              type: string
            value:
              type: integer
          required:
            - text
            - value
      required:
        - duration
        - distance
    LocationGetCoordinatesResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/LocationCoordinates'
      required:
        - success
        - payload
    LocationGetTravelTimeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/LocationTravelTime'
      required:
        - success
        - payload
    LocationValidateAddressResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/LocationCoordinates'
      required:
        - success
        - payload
    Shipping:
      type: object
      allOf:
        - $ref: '#/components/schemas/LocationTravelTime'
        - type: object
          properties:
            _id:
              type: string
            location:
              type: string
            origin:
              $ref: '#/components/schemas/CustomerLocation'
            destination:
              type: object
              properties:
                name:
                  type: string
                fullAddress:
                  type: string
              required:
                - name
                - fullAddress
            cost:
              type: object
              properties:
                currency:
                  type: string
                value:
                  type: integer
              required:
                - currency
                - value
          required:
            - _id
            - location
            - origin
            - destination
            - cost
    ShippingBody:
      type: object
      properties:
        customerId:
          type: number
        locationId:
          type: string
        destination:
          type: object
          properties:
            name:
              type: string
            fullAddress:
              type: string
          required:
            - name
            - fullAddress
      required:
        - locationId
        - destination
    ShippingCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Shipping'
      required:
        - success
        - payload
    ShippingCalculateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Shipping'
      required:
        - success
        - payload
    UploadBody:
      type: object
      properties:
        customerId:
          oneOf:
            - type: number
            - type: string
        resourceUrl:
          type: string
      required:
        - customerId
        - resourceUrl
    UploadResponse:
      type: object
      properties:
        id:
          type: string
        statusQueryGetUri:
          type: string
        sendEventPostUri:
          type: string
        terminatePostUri:
          type: string
        rewindPostUri:
          type: string
        purgeHistoryDeleteUri:
          type: string
        restartPostUri:
          type: string
        suspendPostUri:
          type: string
        resumePostUri:
          type: string
      required:
        - id
        - statusQueryGetUri
        - sendEventPostUri
        - terminatePostUri
        - rewindPostUri
        - purgeHistoryDeleteUri
        - restartPostUri
        - suspendPostUri
        - resumePostUri
    ProductsGetUsersImageBody:
      type: object
      properties:
        productIds:
          type: array
          items:
            type: string
      required:
        - productIds
    ProductsGetUsersImageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/ProductsGetUsersImage'
      required:
        - success
        - payload
    ProductsGetUsersImage:
      type: object
      properties:
        productId:
          type: number
        totalUsers:
          type: number
        users:
          type: array
          items:
            type: object
            properties:
              customerId:
                type: number
              username:
                type: string
              images:
                type: object
                properties:
                  profile:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                      width:
                        type: integer
                      height:
                        type: integer
              fullname:
                type: string
            required:
              - customerId
              - fullname
              - username
              - images
      required:
        - productId
        - totalUsers
        - users
    ProductsGetUsersByVariantResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            productId:
              type: number
            totalUsers:
              type: number
            nextCursor:
              type: string
            result:
              type: array
              items:
                $ref: '#/components/schemas/ProductsGetUsersByVariant'
          required:
            - result
            - totalUsers
            - productId
      required:
        - success
        - payload
    ProductsGetUsersByVariant:
      type: object
      properties:
        customerId:
          type: number
        username:
          type: string
        shortDescription:
          type: string
        images:
          type: object
          properties:
            profile:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                width:
                  type: integer
                height:
                  type: integer
              required:
                - url
                - width
                - height
          required:
            - profile
        fullname:
          type: string
        variantId:
          type: number
      required:
        - customerId
        - fullname
        - shortDescription
        - username
        - images
        - variantId
paths:
  /products/get-users-image:
    post:
      tags:
        - Products
      operationId: productsGetUsersImage
      summary: POST get users belongs to productIds array
      description: This endpoint respond with users images
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductsGetUsersImageBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsGetUsersImageResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  /products/get-users-by-variant:
    parameters:
      - name: productId
        in: query
        description: product Id
        required: true
        schema:
          type: string
      - name: variantId
        in: query
        description: variant Id
        schema:
          type: string
      - name: nextCursor
        in: query
        description: nextCursor
        schema:
          type: string
      - name: limit
        in: query
        description: limit items (default 5)
        schema:
          type: string
    get:
      tags:
        - Products
      operationId: productsGetUsersByVariant
      summary: GET Get all users for specific productId and variantId
      description: This endpoint get all users for specific productId and variantId
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsGetUsersByVariantResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/user/{username}/username-taken':
    get:
      parameters:
        - name: username
          in: path
          description: username
          required: true
          schema:
            type: string
      tags:
        - User
      operationId: userUsernameTaken
      summary: GET check if username is taken
      description: This endpoint return false or true
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUsernameTakenResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/user/{username}':
    parameters:
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      operationId: userGet
      summary: GET Get user
      description: This endpoint gets user object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/user/{username}/products/{productHandle}':
    get:
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: productHandle
          in: path
          required: true
          schema:
            type: string
      tags:
        - UserProduct
      operationId: UserProductGet
      summary: GET Get product that exist in one of the schedules for customer
      description: This endpoint get product for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProductsGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/user/{username}/products':
    get:
      parameters:
        - name: username
          in: path
          description: username is needed
          required: true
          schema:
            type: string
        - name: scheduleId
          in: query
          description: scheduleId is optional
          schema:
            type: string
      tags:
        - UserProduct
      operationId: userProductsListBySchedule
      summary: GET Get products for user
      description: This endpoint get products for user (across all schedules or one scheduleId)
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProductsListByScheduleResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/user/{username}/product/{productHandle}/location/{locationId}':
    get:
      parameters:
        - name: username
          in: path
          description: username is needed
          required: true
          schema:
            type: string
        - name: productHandle
          in: path
          description: productHandle is nedded
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          description: locationId is nedded
          required: true
          schema:
            type: string
      tags:
        - UserProduct
      operationId: userProductsListByLocation
      summary: GET Get products for user
      description: This endpoint is intended to be used when we need to fetch related products from the same schedule and same location.
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProductsListByLocationResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/user/{username}/products/location/{locationId}':
    post:
      parameters:
        - name: username
          in: path
          description: username is needed
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          description: locationId is nedded
          required: true
          schema:
            type: string
      tags:
        - UserProduct
      operationId: userProductsGetProducts
      summary: GET Get products for user
      description: This endpoint get products from one schedule by location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProductsGetProductsBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProductsGetProductsResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/user/{username}/schedule/get-by-product-id/{productHandle}':
    get:
      parameters:
        - name: username
          in: path
          description: username
          required: true
          schema:
            type: string
        - name: productHandle
          in: path
          description: productHandle
          required: true
          schema:
            type: string
      tags:
        - UserSchedule
      operationId: userScheduleGetByProduct
      summary: GET Get user schedule
      description: 'This endpoint should retrieve a schedule and locations belonging to a specific productHandle, along with the product.'
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserScheduleGetByProductIdResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/user/{username}/schedules/locations':
    get:
      parameters:
        - name: username
          in: path
          description: username is needed
          required: true
          schema:
            type: string
      tags:
        - UserSchedule
      operationId: userSchedulesListLocations
      summary: GET Get schedules for user
      description: This endpoint should return all locations present in all schedules for specific user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserScheduleWithLocations'
                required:
                  - success
                  - payload
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/user/{username}/location/{locationId}':
    get:
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - UserLocation
      operationId: userLocationGet
      summary: GET Get one location from user
      description: This endpoint get one location for user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLocationGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/user/{username}/schedule/{scheduleId}/location/{locationId}':
    get:
      parameters:
        - name: username
          in: path
          description: username
          required: true
          schema:
            type: string
        - name: scheduleId
          in: path
          description: schedule Id
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          description: location id
          required: true
          schema:
            type: string
      tags:
        - UserSchedule
      operationId: userScheduleGetByLocation
      summary: GET Get user schedule
      description: This endpoint should retrieve a schedule with products that only belong to a specific locationId.
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserScheduleGetByLocationResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /users/professions:
    get:
      tags:
        - User
      operationId: usersProfessions
      summary: GET Get all users professions with total count
      description: This endpoint get all users
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersProfessionsResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/user/{username}/availability/{locationId}/generate':
    parameters:
      - name: username
        in: path
        description: This field for username
        required: true
        schema:
          type: string
      - name: locationId
        in: path
        description: This field for locationId
        required: true
        schema:
          type: string
    post:
      tags:
        - UserAvailability
      operationId: userAvailabilityGenerate
      summary: POST generate availabilty for user
      description: This endpoint generate availabilty for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAvailabilityGenerateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAvailabilityGenerateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/user/{username}/availability/{locationId}/get':
    parameters:
      - name: username
        in: path
        description: This field for username
        required: true
        schema:
          type: string
      - name: locationId
        in: path
        description: This field for locationId
        required: true
        schema:
          type: string
    post:
      tags:
        - UserAvailability
      operationId: UserAvailabilityGet
      summary: POST get single availabilty for user
      description: This endpoint get's one single availabilty for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAvailabilityGetBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAvailabilityGeResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  /users:
    parameters:
      - name: nextCursor
        in: query
        description: nextCursor
        schema:
          type: string
      - name: limit
        in: query
        description: limit items (default 10)
        schema:
          type: string
      - name: profession
        in: query
        description: profession like makeup_artist
        schema:
          type: string
      - name: sortOrder
        in: query
        description: asc or desc
        schema:
          type: string
    get:
      tags:
        - User
      operationId: usersList
      summary: GET Get all users
      description: This endpoint get all users
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/upload/resource-url':
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerUploadResourceURL
      summary: GET Get customer upload resource url
      description: 'This endpoint gets customer upload resource url, so customer can upload image'
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUploadResourceURLResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}':
    put:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerUpdate
      summary: PUT Update user
      description: This endpoint update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerGet
      summary: GET Get customer
      description: This endpoint gets customer object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/status':
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerStatus
      summary: GET Get customer status
      description: This endpoint gets customer status
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatusResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /customer:
    post:
      tags:
        - Customer
      operationId: customerCreate
      summary: PUT Create user
      description: This endpoint creates new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/isBusiness':
    get:
      parameters:
        - name: customerId
          in: path
          description: CustomerId from shopify
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerIsBusiness
      summary: GET Get customer is business
      description: This endpoint return if customer is business or not
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerIsBusinessResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/products':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerProduct
      operationId: customerProductsList
      summary: GET Get products for customer
      description: This endpoint get products for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/products/ids':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerProduct
      operationId: customerProductsListIds
      summary: GET Get product ids for customer
      description: This endpoint get product ids for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductListIdsResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/product/{productId}':
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
      - name: productId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerProduct
      operationId: customerProductGet
      summary: GET Get product that exist in one of the schedules for customer
      description: This endpoint get product for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    put:
      tags:
        - CustomerProduct
      operationId: customerProductUpsert
      summary: PUT Upsert product to schedule
      description: This endpoint update product that exist in schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerProductUpsertBody'
      responses:
        '200':
          description: Response with schedule product payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductUpsertResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      tags:
        - CustomerProduct
      operationId: customerProductDestroy
      summary: DEL destroy product
      description: This endpoint remove product from schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/booking/{orderId}':
    get:
      parameters:
        - name: customerId
          in: path
          description: customerId for the customer
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          description: orderId for the order
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: date for the lineItem (2014-12-12)
          required: true
          schema:
            type: string
      tags:
        - CustomerBooking
      operationId: customerBookingGet
      summary: GET Get booking
      description: This endpoint gets booking object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerBookingGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/bookings':
    get:
      parameters:
        - name: customerId
          in: path
          description: customerId for the customer
          required: true
          schema:
            type: string
        - name: mode
          in: query
          description: 'either "upcoming", "completed"'
          required: true
          schema:
            type: string
            enum:
              - completed
              - upcoming
      tags:
        - CustomerBooking
      operationId: customerBookingsList
      summary: GET Get all bookings for customer
      description: This endpoint get all bookings
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerBookingListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/orders':
    get:
      parameters:
        - name: customerId
          in: path
          description: customerId for the customer
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: start of date
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: end of date
          required: true
          schema:
            type: string
      tags:
        - CustomerOrder
      operationId: customerOrderList
      summary: GET Get all order for customer
      description: This endpoint get all orders
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOrderListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/lineItemId/{lineItemId}':
    get:
      parameters:
        - name: customerId
          in: path
          description: customerId for the customer
          required: true
          schema:
            type: string
        - name: lineItemId
          in: path
          description: lineItemId for the order
          required: true
          schema:
            type: string
      tags:
        - CustomerOrder
      operationId: customerOrderGet
      summary: GET Get order with lineItem
      description: This endpoint gets order with lineItem object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOrderGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/schedule':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
    post:
      tags:
        - CustomerSchedule
      operationId: customerScheduleCreate
      summary: POST Create schedule
      description: This endpoint create new schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerScheduleCreateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/schedules':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerSchedule
      operationId: customerScheduleList
      summary: GET Get all schedule for customer
      description: This endpoint get all schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
    get:
      tags:
        - CustomerSchedule
      operationId: customerScheduleGet
      summary: GET Get schedule for customer
      description: This endpoint get schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    put:
      tags:
        - CustomerSchedule
      operationId: customerScheduleUpdate
      summary: PUT Update schedule
      description: This endpoint update schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerScheduleUpdateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      tags:
        - CustomerSchedule
      operationId: customerScheduleDestroy
      summary: DEL destroy schedule
      description: This endpoint destroy schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}/slots':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
    put:
      tags:
        - CustomerSchedule
      operationId: customerScheduleSlotUpdate
      summary: PUT Update schedule slot
      description: This endpoint update schedule slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerScheduleSlotsUpdateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScheduleSlotsUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /meta/professions:
    get:
      tags:
        - Meta
      operationId: metaProfessions
      summary: GET Get all professions
      description: This endpoint get all professions
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/MetaItem'
                required:
                  - success
                  - payload
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /meta/specialties:
    get:
      tags:
        - Meta
      operationId: metaspecialties
      summary: GET Get all specialties
      description: This endpoint get all specialties
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/MetaItem'
                required:
                  - success
                  - payload
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/locations/get-all-origins':
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationGetAllOrigins
      summary: GET Get all origin locations
      description: This endpoint get all origin locations
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationGetAllOriginsRepsonse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/location/{locationId}/setDefault':
    put:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationSetDefault
      summary: POST Set new default location for user
      description: This endpoint set new default location for user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationSetDefaultResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/location/{locationId}':
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationGet
      summary: GET Get one location from user
      description: This endpoint get one location for user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationRemove
      summary: POST Remove location from user
      description: This endpoint remove location but does not delete location from db
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationRemoveResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    post:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationAdd
      summary: POST Add location to user
      description: This endpoint add new location
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationAddResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    put:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationUpdate
      summary: PUT Update location
      description: This endpoint update existing location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLocationUpdateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/locations':
    post:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationCreate
      summary: POST Create location origin or destination
      description: This endpoint creates new location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLocationCreateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    get:
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      tags:
        - CustomerLocation
      operationId: customerLocationList
      summary: GET Get all locations for user
      description: This endpoint get all locations for user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLocationListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /location/get-coordinates:
    get:
      parameters:
        - name: fullAddress
          in: query
          schema:
            type: string
      tags:
        - Location
      operationId: locationGetCoordinates
      summary: GET location coordinates
      description: This endpoint get coordinates object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGetCoordinatesResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /location/validate-address:
    get:
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: fullAddress
          in: query
          schema:
            type: string
      tags:
        - Location
      operationId: locationValidateAddress
      summary: GET location validate address
      description: This endpoint validate address
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationValidateAddressResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /location/get-travel-time:
    get:
      parameters:
        - name: origin
          in: query
          schema:
            type: string
        - name: destination
          in: query
          schema:
            type: string
      tags:
        - Location
      operationId: locationGetTravelTime
      summary: GET location travel time
      description: This endpoint gets traval time object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGetTravelTimeResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /shipping/create:
    post:
      tags:
        - ShippingCreate
      operationId: shippingCreate
      summary: POST create shipping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  /shipping/calculate:
    post:
      tags:
        - ShippingCalculate
      operationId: shippingCalculate
      summary: POST get shipping calculate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingCalculateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  /orchestrators/upload:
    post:
      tags:
        - Orchestrators
      operationId: upload
      summary: POST Upload new customer image
      description: This endpoint is used to upload new image for customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
